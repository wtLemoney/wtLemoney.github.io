<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtLemoney</title>
  
  <subtitle>To be a happy&amp;lovely programmer...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wtlemoney.github.io/"/>
  <updated>2018-08-01T16:02:37.930Z</updated>
  <id>https://wtlemoney.github.io/</id>
  
  <author>
    <name>wtLemoney</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本周学习杂记（二）</title>
    <link href="https://wtlemoney.github.io/2018/07/22/%E6%9D%82%E8%AE%B03/"/>
    <id>https://wtlemoney.github.io/2018/07/22/杂记3/</id>
    <published>2018-07-22T11:59:26.000Z</published>
    <updated>2018-08-01T16:02:37.930Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1内存泄露识别">1.内存泄露识别</a></li><li><a href="#2syn攻击">2.SYN攻击</a></li><li><a href="#3pwa-下一代web应用模型">3.PWA–下一代Web应用模型</a></li><li><a href="#4webassembly">4.WebAssembly</a></li><li><a href="#5graphql">5.GraphQL</a></li><li><a href="#6状态码301和302的区别">6.状态码301和302的区别</a></li><li><a href="#7数组和链表的区别">7.数组和链表的区别</a></li><li><a href="#8node和java区别">8.node和java区别</a></li><li><a href="#9tcp和udp的区别">9.TCP和UDP的区别</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1内存泄露识别">1.内存泄露识别</span></h3><p>经验法则：如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。</p><p>1）浏览器查看<br>在终端Performance面板，勾选Memory，录制-页面操作-stop。如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。否则，就说明存在内存泄露。</p><p>2）命令行<br>使用 Node 提供的process.memoryUsage方法，它返回一个对象，包含了 Node 进程的内存占用信息。</p><p>console.log(process.memoryUsage());该对象包含四个字段，单位是字节：</p><blockquote><p>rss（resident set size）：所有内存占用，包括指令区和堆栈。<br>heapTotal：”堆”占用的内存，包括用到的和没用到的。<br>heapUsed：用到的堆的部分。<br>external： V8 引擎内部的 C++ 对象占用的内存。</p></blockquote><p>判断内存泄漏，以heapUsed字段为准。</p><h3><span id="2syn攻击">2.SYN攻击</span></h3><p>一种典型的DDOS攻击。</p><p>SYN攻击：Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server回复确认包，并等待Client的确认。由于源地址是不存在的，因此，Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。</p><p>判断攻击：当Server上有大量半连接状态且源IP地址是随机的，则可以断定遭到SYN攻击了，使用如下命令可以让之现行：<code>#netstat -nap | grep SYN_RECV</code>。半连接状态即指Server收到Client的ACK之前的TCP连接。</p><h3><span id="3pwa下一代web应用模型">3.PWA–下一代Web应用模型</span></h3><p><strong>背景</strong></p><p>Native app体验好，进入方便。缺点：</p><ul><li>开发成本高（ios和安卓）</li><li>软件上线需要审核</li><li>版本更新麻烦，需要将新版本上传到不同的应用商店</li><li>下载才能使用</li></ul><p>Web网页开发成本低，网页更新只需上传至服务器就OK，浏览器打开就可以访问。缺点：</p><ul><li>体验比Native app差，入口不便捷</li><li>离线不能使用</li><li>不能进行消息推送</li></ul><p><strong>什么是PWA?</strong></p><p>全称Progressive Web App，即渐进式WEB应用。</p><p>一个PWA应用首先是一个网页。一个添加了App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能的网页应用。</p><p>Service Worker： Chrome 团队提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力。可以监听和截拦作用域范围内所有页面的 HTTP 请求。</p><p><strong>解决的问题？</strong></p><ul><li>使入口更方便，可以添加至主屏幕全屏运行。</li><li>离线缓存</li><li>消息推送</li></ul><p>使得Web应用渐进式接近原生APP</p><p><strong>存在的主要问题？</strong></p><ul><li>支持率不高，ios手机端不支持</li><li>各大厂商还未明确支持PWA</li><li>微信小程序的竞争</li></ul><h3><span id="4webassembly">4.WebAssembly</span></h3><p>WebAssembly（.wasm） 源于 Mozilla 发起的 Asm.js 项目，用于补充 JavaScript，其本地解码速度比 JS 解析快得多，让高性能的 Web 应用在浏览器上运行成为可能，比如视频游戏、计算机辅助设计、视频和图像编辑、科学可视化等等。</p><p>优势：由于 WebAssembly 字节码（Bytecode）较一般程序代码小许多倍，意谓着这项标准可节省移动设备的使用带宽，有助于改善网页加载速度，且字节码更适合浏览器读取。</p><p>还提供了一个JavaScript API，为前端开发人员提供了一个更容易的切入点。</p><p>对于不支持 Web Assembly 的浏览器， 会有一段 Javascript 把 Web Assembly 重新翻译为 Javascript 运行， 这个技术叫 polyfill, HTML5 刚出来的时候很常用的一个技术。</p><h3><span id="5graphql">5.GraphQL</span></h3><p>一种API查询语言。</p><p>请求你所要的数据不多不少，获取多个资源只用一个请求，描述所有的可能类型系统。</p><p>入门学习<a href="http://graphql.cn/learn/" target="_blank" rel="noopener"> &gt;&gt;</a></p><h3><span id="6状态码301和302的区别">6.状态码301和302的区别</span></h3><p>301是永久重定向，请求是可以缓存的。<br>302是临时重定向，只有在Cache-Control或Expires中指定的情况下，这个响应才是可缓存的。。</p><p>301比较常用的场景是使用域名跳转。<br>　　比如，我们访问 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 会跳转到 <a href="https://www.baidu.com，发送请求之后，就会返回301状态码，然后返回一个location，提示新的地址，浏览器就会拿着这个新的地址去访问。" target="_blank" rel="noopener">https://www.baidu.com，发送请求之后，就会返回301状态码，然后返回一个location，提示新的地址，浏览器就会拿着这个新的地址去访问。</a> </p><p>302用来做临时跳转。<br>　　比如，未登陆的用户访问用户中心重定向到登录页面。访问404页面会重新定向到首页。</p><h3><span id="7数组和链表的区别">7.数组和链表的区别</span></h3><p>数组特点：<br>　　在内存中，数组是一块连续的区域。<br>　　数组需要预留空间，在使用前要先申请占内存的大小，可能会浪费内存空间。<br>　　插入数据和删除数据效率低。随机读取效率很高。<br>　　不利于扩展，数组定义的空间不够时要重新定义数组。<br>链表特点：<br>　　在内存中可以存在任何地方，不要求连续。<br>　　每一个数据都保存了下一个数据的内存地址，通过这个地址找到下一个数据。<br>　　增加数据和删除数据很容易。<br>　　查找数据效率低，因不具有随机访问性，所以访问某个位置的数据都要从第一个数据开始访问。<br>　　不指定大小，扩展方便。链表大小不用定义，数据随意增删。</p><h3><span id="8node和java区别">8.node和java区别</span></h3><p>都是服务器语言。</p><p>node.js：<br>能让js流畅地运行在服务器端。<br>可以解析JS代码（没有浏览器安全级的限制）<br>提供系统级别的API：<br>　　文件的读写<br>　　进程的管理<br>　　网络通信</p><p>区别：<br>（1）Node.js比Java更快 ：node.js开发快，运行的效率也算比较高，但是如果项目大了就容易乱，而且javascript不是静态类型的语言，要到运行时才知道类型错误，所以写的多了之后免不了会出现光知道有错但是找不到哪儿错的情况，所以测试就得些的更好更详细。<br>java开发慢，但是如果项目大、复杂的话，用java就不容易乱，管理起来比node.js省。<br>（2）Node.js 前后端都采用Javascript，代表未来发展的趋势，而java则是现在的最流行的服务器端编程语言。<br>（3）Node.js和Java EE——一种是解释语言，一种是编译语言。</p><h3><span id="9tcp和udp的区别">9.TCP和UDP的区别</span></h3><p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</p><p>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</p><p>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p><p>3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p><p>4.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</p><p>5、TCP对系统资源要求较多，UDP对系统资源要求较少。</p><p><strong>为什么UDP有时比TCP更有优势?</strong></p><p>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。</p><p>（1）网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</p><p>（2）TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。</p><p>采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1内存泄露识别&quot;&gt;1.内存泄露识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2syn攻击&quot;&gt;2.SYN攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3pwa-下一代web应用模型&quot;&gt;3.PWA–下一代Web应用模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4webassembly&quot;&gt;4.WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5graphql&quot;&gt;5.GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6状态码301和302的区别&quot;&gt;6.状态码301和302的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7数组和链表的区别&quot;&gt;7.数组和链表的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8node和java区别&quot;&gt;8.node和java区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9tcp和udp的区别&quot;&gt;9.TCP和UDP的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="学习杂记" scheme="https://wtlemoney.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="碎碎念" scheme="https://wtlemoney.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习</title>
    <link href="https://wtlemoney.github.io/2018/07/16/webpack%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wtlemoney.github.io/2018/07/16/webpack学习/</id>
    <published>2018-07-16T15:12:38.000Z</published>
    <updated>2018-07-26T15:27:51.056Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1为什么需要打包">1.为什么需要打包？</a></li><li><a href="#2webpack介绍">2.webpack介绍</a></li><li><a href="#3webpack强大功能">3.webpack强大功能</a></li><li><a href="#4webpack4x的变化">4.webpack@4.x的变化</a></li><li><a href="#5几个插件">5.几个插件</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1为什么需要打包">1.为什么需要打包？</span></h3><p>前端代码越来越复杂，不可能把所有代码写在一个文件里。为了方便管理，将其放在不同模块里。浏览器加载时，不可能单独加载某个模块，会很慢，所以需要打包。简单总结，如下理由：</p><p>模块化<br>优化加载速度<br>需要集成一些第三方库</p><h3><span id="2webpack介绍">2.webpack介绍</span></h3><p>模块打包机，分析项目结构，找到javascript模块以及其它的一些浏览器不能直接运行的拓展语言（scss,typecript等），并将其转换和打包为合适的格式供浏览器使用。</p><p>工作方式：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><p>特点：同时支持CommonJs与AMD,灵活设置加载方式，一切都可以打包</p><p>Gulp/Grunt：是一种能够优化前端的开发流程的工具,而WebPack是一种模块化的解决方案。工作方式：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具可以自动替你完成这些任务。</p><p>Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p><h3><span id="3webpack强大功能">3.webpack强大功能</span></h3><ol><li><p>Source Maps：webpack就可以在打包时生成source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p></li><li><p>webpack-dev-server：一个可选的本地开发服务器，可以让浏览器监听你的代码的修改，并自动刷新显示修改后的结果。</p></li><li><p>Loaders：通过使用不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p></li><li><p>babel：一个编译JavaScript的平台,让你能使用最新的JavaScript代码（ES6，ES7…），让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</p></li><li><p>插件（Plugins）：是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p></li></ol><h3><span id="4webpack4x的变化">的变化</span></h3><ol><li><p>webpack4不再支持node v4，这是因为新的webpack和附属插件使用了es6的语法，v4版本对es6支持不是很到位。</p></li><li><p><a href="mailto:webpack@4.x" target="_blank" rel="noopener">webpack@4.x</a>里把很多选项都设置了默认值，比如入口就是./src，输出目录就是./dist。也可以自己设置进行更改。所以在用<a href="mailto:webpack@4.x" target="_blank" rel="noopener">webpack@4.x</a>的时候，我们甚至都可以没有webpack.config.js这个配置文件也能一样打包。</p></li><li><p>拆分了旧版本里的webpack，分成了用来处理逻辑的webpack和提供可执行命令的webpack-cli。</p></li><li><p>添加了mode选项，用来区分编译的环境，提供了development、production和none三个选项，不指定mode，会出现警告。</p></li><li><p>配置上的变动，类似删除了commonChunksPlugin，用optimization来代替。</p></li><li><p>性能优化，提高了打包性能。</p></li></ol><p>webpack <a href="http://webpack.css88.com/" target="_blank" rel="noopener">中文文档&gt;&gt;</a></p><h3><span id="5几个插件">5.几个插件</span></h3><p><strong>html-webpack-plugin插件</strong></p><p>为html文件中引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题</p><p>可以在dist/目录下生成index.html文件，比如单页面可以生成一个html文件入口，配置N个html-webpack-plugin可以生成N个页面入口</p><p><strong>html-loader</strong></p><p>实现资源复用<br>使用：抽取公共部分的html代码,在每个页面对应的部分引入<code>&lt;%= require(html-loader!./common.html&#39;) %&gt;</code></p><p><strong>extract-text-webpack-plugin</strong></p><p>抽离css样式,防止将样式打包在js中引起页面样式加载错乱的现象</p><p><strong>webpack-dev-server</strong></p><p>一个静态资源服务器，只用于开发环境；是一个小型Express服务器，webpack-dev-server会把编译后的静态文件全部保存在内存里</p><p>可以实现浏览器的无刷新更新（hot reload）</p><p><strong>基于hogan的HTML模板渲染</strong></p><p>介绍：非常简单、体积最小的模板引擎，可以理解为Mustache语法的编译器。</p><p>使用：变量替换、循环</p><p>用法简单解释：</p><blockquote><p>((data)) —-转义的变量</p><p>{((data))} —-不转义的变量</p><p>((#list)) ((/list)) —-列表循环 / 真值判断</p><p>((^list)) ((/list)) —-空列表 / 非真值判断</p><p>((.)) —-枚举的当前元素</p><p>((!)) —-注释</p></blockquote><p>注意，以上<code>((...))</code>应都是Mustache语法的双大括号。由于双大括号markdown语言编译会出错，所以写成小括号。</p><p>另：</p><p>0基础学习，可以把阮一峰老师的webpack教程捋一遍 <a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="noopener">webpack&gt;&gt;</a><br>跟着敲了一边阮老师教程demo的<a href="https://www.jianshu.com/p/080e18fcf0e3" target="_blank" rel="noopener">学习笔记&gt;&gt;</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1为什么需要打包&quot;&gt;1.为什么需要打包？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2webpack介绍&quot;&gt;2.webpack介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3webpack强大功能&quot;&gt;3.webpack强大功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4webpack4x的变化&quot;&gt;4.webpack@4.x的变化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5几个插件&quot;&gt;5.几个插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://wtlemoney.github.io/categories/webpack/"/>
    
    
      <category term="工具" scheme="https://wtlemoney.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="webpack" scheme="https://wtlemoney.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>本周学习杂记（二）</title>
    <link href="https://wtlemoney.github.io/2018/07/08/%E6%9D%82%E8%AE%B02/"/>
    <id>https://wtlemoney.github.io/2018/07/08/杂记2/</id>
    <published>2018-07-08T10:13:43.000Z</published>
    <updated>2018-07-27T14:34:16.967Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1comet和web-sockets-sse">1.Comet和Web Sockets、SSE</a></li><li><a href="#2video视频倍速播放实现">2.video视频倍速播放实现</a></li><li><a href="#3flutter">3.Flutter</a></li><li><a href="#4typescript">4.TypeScript</a></li><li><a href="#5高并发流量控制">5.高并发流量控制</a></li><li><a href="#6sql注入">6.SQL注入</a></li><li><a href="#7ipv4和ipv6">7.IPv4和IPv6</a></li><li><a href="#8nginx反向代理解决跨域问题">8.nginx反向代理解决跨域问题</a></li><li><a href="#9提高cookie安全性的几种方式">9.提高cookie安全性的几种方式</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1comet和web-sockets-sse">1.Comet和Web Sockets、SSE</span></h3><p>一种服务器向页面推送数据的技术。实现方式：长轮询和流。</p><p>长轮询：页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据后，浏览器关闭连接，随即又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。<br>短轮询：浏览器每隔一段时间向浏览器发送http请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。缺点是不断建立http连接，严重浪费了服务器端和客户端的资源。</p><p>HTTP流：浏览器向服务器发送一个请求，而服务器保持打开，然后周期性的向浏览器发送数据。</p><p>Web Sockets：Html5定义的一个新协议。在一个单独的持久连接上提供全双工、双向通信。好处：能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTTP那样字节级的开销，非常适合移动应用。缺点：制定协议的时间比制定js API的时间还要长。</p><p>首先需要http简历一个连接，连接一旦建立，客户端和服务器端就处于平等的地位，可以相互发送数据，不存在请求和响应的区别。</p><p>SSE：是HTML5新增的功能，全称为Server-Sent Events。它可以允许服务推送数据到客户端。SSE在本质上就与之前的长轮询、短轮询不同，虽然都是基于http协议的，但是轮询需要客户端先发送请求。而SSE最大的特点就是不需要客户端发送请求，可以实现只要服务器端数据有更新，就可以马上发送到客户端。</p><p>它不需要建立或保持大量的客户端发往服务器端的请求，节约了很多资源，提升应用性能。</p><h3><span id="2video视频倍速播放实现">2.video视频倍速播放实现</span></h3><p>实现：使用playbackRate属性控制。playbackRate属性是个可读写的控制音视频播放速率的属性。</p><p>倍速播放是HTML5 video视频播放天然支持功能。<br>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> select = <span class="built_in">document</span>.querySelector(<span class="string">'select'</span>);</span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="comment">// 视频元素</span></span><br><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span><br><span class="line"><span class="comment">// 改变播放速率</span></span><br><span class="line">select.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    video.playbackRate = <span class="keyword">this</span>.value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 点击播放按钮</span></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    video.play();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3><span id="3flutter">3.Flutter</span></h3><p>Flutter是Google的移动UI框架，用以帮助开发者在IOS和Android两个平台开发高质量原生应用的全新移动UI框架。<br>闲鱼是国内最早使用 Flutter 的 App 之一。</p><p><a href="https://juejin.im/post/5ad6b8db6fb9a028c42eb90a" target="_blank" rel="noopener">Flutter简介 &gt;&gt;</a></p><h3><span id="4typescript">4.TypeScript</span></h3><p>由微软开发的自由和开源的编程语言，它是JavaScript的一个超集，扩展了JavaScript的语法。使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</p><p>语法特性：</p><blockquote><p>类 Classes<br>接口 Interfaces<br>模块 Modules<br>类型注解 Type annotations<br>编译时类型检查 Compile time type checking<br>Arrow 函数</p></blockquote><h3><span id="5高并发流量控制">5.高并发流量控制</span></h3><p>应对大流量的常见手段</p><p>缓存：减少DB访问。<br>降级：指不是核心链路，那么就把这个服务降级掉。<br>限流：尽可能提升系统的吞吐量。</p><p>限流的常用方式：计数器、滑动窗口、漏桶、令牌桶。</p><p>计数器：在一段时间内，进行计数，与阀值进行比较，到了时间临界点，将计数器清0。<br>滑动窗口：把固定时间片，进行划分，并且随着时间的流逝，进行移动，这样就巧妙的避开了计数器的临界点问题。<br>漏桶：有一个固定的桶，进水的速率是不确定的，但是出水的速率是恒定的，当水满的时候是会溢出的。—意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。<br>令牌桶：生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</p><h3><span id="6sql注入">6.SQL注入</span></h3><p>SQL是一种告诉数据库需要做什么的特殊的语言。</p><p>SQL注入是一种将SQL代码添加到输入参数中，传递到服务器解析并执行的一种攻击手法。</p><p>发生原因：一个查询（一系列的指令）会有多个参数（数据）插入其中，而这些参数被当做指令执行从而导致异常。因此，一个恶意的用户可以利用这样的漏洞来让数据库返回所有的用户的信息。</p><p>如何避免：<br>1）严格检查输入变量的类型和格式<br>2）过滤和转义特殊字符<br>3）利用mysql的预编译机制。即把指令和数据用一种数据库（机器人）容易区分的方式分开。 通常我们会将数据和指令分开发送。</p><p>攻击场景：表单输入数据提交时，若没有进行特殊字符过滤就把用户提交过来的数据直接拿去执行，很容易造成SQL注入。</p><h3><span id="7ipv4和ipv6">7.IPv4和IPv6</span></h3><p>4和6表示协议的版本号。</p><p>IPv4：地址位数为32位，也就是最多有2的32次方的电脑可以联到Internet上。</p><p>IPv6：采用128位地址长度，几乎可以不受限制地提供地址。</p><p>区别：<br><img src="https://s1.ax1x.com/2018/07/26/PNZPEj.jpg" width="883" height="663"></p><h3><span id="8nginx反向代理解决跨域问题">8.nginx反向代理解决跨域问题</span></h3><p>nginx是一个高性能的web服务器，特点是并发数高，一般在大型项目中都有应用，用来进行负载均衡的实现。</p><p>反向代理：是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p>利用nginx反向代理测试解决跨域等问题，前端就可以自己模拟数据请求，然后渲染数据，对开发效率有很大帮助。</p><p>使用nginx配置步骤 <a href="https://blog.csdn.net/cjd6568358/article/details/51871039" target="_blank" rel="noopener">详情&gt;&gt;</a></p><h3><span id="9提高cookie安全性的几种方式">9.提高cookie安全性的几种方式</span></h3><p><strong>1.对保存到cookie里面的敏感信息加密</strong></p><p><strong>2.设置HttpOnly为true</strong></p><p>该属性值的作用就是防止Cookie值被页面脚本读取。HttpOnly属性只是增加了攻击者的难度，Cookie盗窃的威胁并没有彻底消除，因为cookie还是有可能传递的过程中被监听捕获后信息泄漏。</p><p><strong>3.设置Secure为true</strong></p><p>给Cookie设置该属性时，只有在https协议下访问的时候，浏览器才会发送该Cookie。</p><p>把cookie设置为secure，只保证cookie与WEB服务器之间的数据传输过程加密，而保存在本地的cookie文件并不加密。如果想让本地cookie也加密，得自己加密数据。</p><p><strong>4.给Cookie设置有效期</strong></p><p>如果不设置有效期，万一用户获取到用户的Cookie后，就可以一直使用用户身份登录。</p><p>在设置Cookie认证的时候，需要加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”，并在Web应用中，首先判断两个时间是否已超时，再执行其他操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1comet和web-sockets-sse&quot;&gt;1.Comet和Web Sockets、SSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2video视频倍速播放实现&quot;&gt;2.video视频倍速播放实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3flutter&quot;&gt;3.Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4typescript&quot;&gt;4.TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5高并发流量控制&quot;&gt;5.高并发流量控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6sql注入&quot;&gt;6.SQL注入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7ipv4和ipv6&quot;&gt;7.IPv4和IPv6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8nginx反向代理解决跨域问题&quot;&gt;8.nginx反向代理解决跨域问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9提高cookie安全性的几种方式&quot;&gt;9.提高cookie安全性的几种方式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="学习杂记" scheme="https://wtlemoney.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="碎碎念" scheme="https://wtlemoney.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>移动端项目开发中遇到的问题及解决方案</title>
    <link href="https://wtlemoney.github.io/2018/07/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    <id>https://wtlemoney.github.io/2018/07/01/移动端问题/</id>
    <published>2018-07-01T15:05:40.000Z</published>
    <updated>2018-07-17T14:51:35.413Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1部分手机第三方输入法会将页面往上挤的问题">1.部分手机第三方输入法会将页面往上挤的问题</a></li><li><a href="#2实现真正的1像素border">2.实现真正的1像素border</a></li><li><a href="#3手机端扫码查看app页面">3.手机端扫码查看app页面</a></li><li><a href="#4better-scroll点击事件">4.better-scroll点击事件</a></li><li><a href="#5fastclick处理移动端click事件300ms延迟">5.fastClick：处理移动端click事件300ms延迟</a></li><li><a href="#6css3弹性布局文字超出部分省略号代替不起作用">6.CSS3弹性布局文字超出部分省略号代替不起作用</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1部分手机第三方输入法会将页面往上挤的问题">1.部分手机第三方输入法会将页面往上挤的问题</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特定需求页面，比如评论页面，输入框在底部之类的</span></span><br><span class="line"><span class="keyword">const</span> interval=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//注意关闭页面或者销毁组件的时候记得清空定时器</span></span><br><span class="line">clearInterval(interval);</span><br></pre></td></tr></table></figure><h3><span id="2实现真正的1像素border">2.实现真正的1像素border</span></h3><p>设备像素比知识：张鑫旭大神的<a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a>，这篇也不错：<a href="https://juejin.im/entry/56ce78eac24aa800545af276" target="_blank" rel="noopener">移动端高清、多屏适配方案</a></p><p>由于设备像素比存在的原因，我们在处理设计图的一些边框时，对于1px的border，如果在代码里将其写死，可能在不同设备像素比的设备中，粗细不一样，尤其是在目前大多数设备像素比为2的设备中，过粗。</p><p>利用媒体查询和<code>min-device-pixel-ratio</code>就可以轻松的搞定，实现货真价实的1px border。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stylus代码</span></span><br><span class="line"><span class="attribute">border</span>-<span class="number">1px</span>(<span class="variable">$color</span>)</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  &amp;::after</span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span> //这里距离底部border,若是顶部，这里改为top :<span class="number">0</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="variable">$color</span>  //顶部，改为border-bottom</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1px border问题解决,缩放处理</span></span><br><span class="line">@media (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),(min-device-pixel-ratio: <span class="number">1.5</span>)</span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">@media (-webkit-min-device-pixel-ratio: <span class="number">2</span>),(min-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></p><h3><span id="3手机端扫码查看app页面">3.手机端扫码查看app页面</span></h3><ul><li>不能用localhost：xxx的地址，要把localhost改为本机ip地址,即 本机ip:xxx</li><li>复制 本机ip:xxx 到 <a href="https://cli.im/" target="_blank" rel="noopener">草料二维码</a> 网站，生成相应二维码</li><li>手机可以看到相应的页面</li></ul><p>注意：手机跟电脑需要同一个局域网</p><h3><span id="4better-scroll点击事件">4.better-scroll点击事件</span></h3><p>问题：PC页面时,点击不会被 better-scroll 阻止事件,初始化,给 better-scroll 派发事件,使移动端拥有点击事件,因此切换到PC端时,点击事件会被执行两次</p><p>方法：在点击时,传 event 变量, Better-scroll 插件中的 event 事件和原生 js 的 event 有属性上得区别, Better-scroll 插件派发的事件时 event_constructed 为true,原生点击事件是没有这个属性的<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">selectMenu(index,<span class="keyword">event</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">event</span>._constructed)&#123;<span class="comment">//如果不存在这个属性,则不执行下面的函数</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="5fastclick处理移动端click事件300ms延迟">5.fastClick：处理移动端click事件300ms延迟</span></h3><p>先执行安装fastclick: <code>npm install fastclick --save</code></p><p>然后在main.js中引入，并绑定到body:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line"></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure></p><p>不应用fastclick的场景：<br>1）桌面浏览器<br>2）若视口元标签<code>&lt;meta&gt;</code>中设置了<code>width=device-width</code>，Android上的Chrome 32+会禁用300ms延时</p><h3><span id="6css3弹性布局文字超出部分省略号代替不起作用">6.CSS3弹性布局文字超出部分省略号代替不起作用</span></h3><p>父元素设置为<code>flex：1</code>时，当子元素文字长度超出宽度时，省略符号不显示，即<code>text-overflow: ellipsis;</code>不起作用。<br>解决办法：在父元素初设置min-width属性或width属性。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"children"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"text"</span>&gt;</span><br><span class="line">            这是一个有效果的文字超出用省略号代替的例子，这是一个有效果的文字超出用省略号代替的例子</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">       <span class="attribute">display</span>: flex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.children</span>&#123;</span><br><span class="line">       <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">       <span class="comment">/*min-width: 0;*/</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.text-deal</span>&#123;</span><br><span class="line">       <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">       <span class="attribute">overflow</span>: hidden;</span><br><span class="line">       <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1部分手机第三方输入法会将页面往上挤的问题&quot;&gt;1.部分手机第三方输入法会将页面往上挤的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2实现真正的1像素border&quot;&gt;2.实现真正的1像素border&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3手机端扫码查看app页面&quot;&gt;3.手机端扫码查看app页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4better-scroll点击事件&quot;&gt;4.better-scroll点击事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5fastclick处理移动端click事件300ms延迟&quot;&gt;5.fastClick：处理移动端click事件300ms延迟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6css3弹性布局文字超出部分省略号代替不起作用&quot;&gt;6.CSS3弹性布局文字超出部分省略号代替不起作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="移动端问题" scheme="https://wtlemoney.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="fastClick" scheme="https://wtlemoney.github.io/tags/fastClick/"/>
    
      <category term="better-scroll" scheme="https://wtlemoney.github.io/tags/better-scroll/"/>
    
      <category term="移动点餐项目" scheme="https://wtlemoney.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%82%B9%E9%A4%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>本周学习杂记（一）</title>
    <link href="https://wtlemoney.github.io/2018/06/24/%E6%9D%82%E8%AE%B01/"/>
    <id>https://wtlemoney.github.io/2018/06/24/杂记1/</id>
    <published>2018-06-24T14:50:05.000Z</published>
    <updated>2018-07-17T14:53:09.411Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1ascii码-unicode码和utf-8">1.ASCII码、Unicode码和UTF-8</a></li><li><a href="#2generator函数">2.Generator函数</a></li><li><a href="#3web-worker">3.Web Worker</a></li><li><a href="#4fiddler">4.Fiddler</a></li><li><a href="#5模块化">5.模块化</a></li><li><a href="#6浏览器数据库indexeddb">6.浏览器数据库IndexedDB</a></li><li><a href="#7sql和nosql">7.SQL和NoSQL</a></li><li><a href="#8ddos攻击">8.DDOS攻击</a></li><li><a href="#9常用命令行">9.常用命令行</a></li><li><a href="#10vim程序编辑器简单操作">10.vim程序编辑器简单操作</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1ascii码-unicode码和utf-8">1.ASCII码、Unicode码和UTF-8</span></h3><p>要想打开一个文本文件，得先知道它的编码方式，否则用错误的编码方式解读就会出现乱码。</p><p>ASCII码：英文字符与二进制之间做的统一规定，只支持英文字符。<br>Unicode码：解决ASCII码只支持英文字符的问题，把所有语言都统一到一套编码里，乱码问题迎刃而解。<br>UTF-8：一种Unicode的实现方式。若文本全是英文，用Unicode编码比ASCII码需要多一倍的存储空间，传输上也不划算，因而出现了UTF-8,即‘可变长编码’。</p><p>简体中文常见的编码方式是GB2312。</p><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">详细的介绍 Unicode与UTF-8的转换&gt;&gt;</a></p><h3><span id="2generator函数">2.Generator函数</span></h3><p>ES6提供的一种异步编程解决方案。</p><p>执行该函数会返回一个遍历器对象。通过调用遍历器对象的next方法，使指针移向下一个对象。每次调用next方法，会返回有value和done两个属性的对象。next方法的参数表示上一条yield语句的返回值。</p><p>与正常函数的区别：可以返回一系列的值，因为可以有任意多条yield语句。</p><p>意义：将异步操作同步化表达，改写回调函数。</p><h3><span id="3web-worker">3.Web Worker</span></h3><p>为JavaScript创造多线程环境，允许主线程创建Worker线程，并分配任务让其运行。</p><p>实例：Worker线程可以完成轮询（有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变，这个工作可以防止Worker里面）</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noopener">详情&gt;&gt;</a></p><h3><span id="4fiddler">4.Fiddler</span></h3><p>一个http协议调试代理工具，能够监听所有来往数据。<a href="https://www.cnblogs.com/shijingxiang/articles/4452624.html" target="_blank" rel="noopener">使用&gt;&gt;</a></p><p>对前端开发者来说，Fiddler可以用反向代理的身份帮助调试线上的网站，移动端网页也可以。通过fiddler,可以用本地的css,js，图片甚至是html替代网上的资源，能够轻松解决跨域问题。</p><p>针对Windows系统。<br>ios系统请使用Charles。</p><h3><span id="5模块化">5.模块化</span></h3><p>意义：解耦，可并行开发</p><p>模块化方案有：AMD、CMD、CommonJS、ES6。经常使用CommonJS+webpack</p><p>模块加载实质：CommonJS模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。ES6模块输出的是值的引用，模块里面的变量绑定其所在的模块，导入的模块是只读的，可以对其添加属性，但是对它重新赋值会报错。</p><p>CommonJS运行时加载，ES6编译时加载。</p><h3><span id="6浏览器数据库indexeddb">6.浏览器数据库IndexedDB</span></h3><p>浏览器提供的本地数据库，允许存储大量数据。可以被网页脚本创建和操作。</p><p>不属于SQL,更接近NoSQL。</p><p>主要特点：<br>1）键值对储存。<br>2）同源限制。<br>3）异步。<br>4）支持二进制存储。<br>5）储存空间大。</p><p>IndexedDB的一些简单操作见戳 <a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">这里&gt;&gt;</a></p><h3><span id="7sql和nosql">7.SQL和NoSQL</span></h3><p>SQL：Structured Query Language，指关系型数据库。主要代表有SQL Server，Oracle，MySQL<br>NoSQL：Not Only SQL，泛指非关系型数据库。主要代表有MongoDB，Redis，CouchDB</p><p>区别：SQL数据存储在特定结构的表中，通常是以数据库形式存储数据；NoSQL更加灵活和可扩展，存储方式可以是JSON文档、哈希表或其他方式。</p><h3><span id="8ddos攻击">8.DDOS攻击</span></h3><p>DDoS:Distributed Denial of Service，分布式拒绝服务攻击。<br>什么是DDOS攻击？在短时间内发起大量合法的请求，耗尽服务器的资源，无法响应正常的访问的一类攻击。</p><p>前不久阮一峰老师的个人网站就遭受了DDOS攻击的一种：cc攻击。就是简单粗暴地送来大量正常的请求，超出服务器的最大承受量，导致宕机。针对这种cc攻击，阮一峰老师专门写了一篇博文针对该类攻击的防范教程，<a href="http://www.ruanyifeng.com/blog/2018/06/ddos.html" target="_blank" rel="noopener">详情戳&gt;&gt;</a></p><p>针对防范这类cc攻击，我这里就简单总结一下软老师的博客。<br>1）备份网站：有一个临时的备份网站或静态的临时主页。<br>2）<strong>HTTP请求拦截</strong>：对付有特征的恶意请求。<br>3）带宽扩容：由于真正的DDOS攻击是没有特征的，可以考虑这个耗money的方法。<br>4）<strong>CDN</strong>：带宽扩容的一种，指将网站的静态内容分发到多个服务器，用户就近访问，提高速度。网站内容存放在源服务器，CDN 上面是内容的缓存。用户只允许访问 CDN，如果内容不在 CDN 上，CDN 再向源服务器发出请求。</p><h3><span id="9常用命令行">9.常用命令行</span></h3><p><img src="https://s1.ax1x.com/2018/07/15/PMjYa6.png" width="855" height="588"></p><h3><span id="10vim程序编辑器简单操作">10.vim程序编辑器简单操作</span></h3><p><img src="https://s1.ax1x.com/2018/07/14/PMGuU1.jpg" width="620" height="400"></p><p>【一般模式切换到编辑模式按钮说明】<br>i：在光标前插入<br>I：在行首插入<br>a：在光标后插入<br>A：在行末插入<br>s：删除光标所在的字符再插入<br>S：删除光标所在行再插入<br>o：在当前行之下新建行<br>O：在当前行之前新建行</p><p>【一般模式切换到命令行模式按钮说明】<br>:q：离开vi<br>:q!：若曾修改过文件，又不想存储，使用 ！为强制离开不保存<br>:wq：回车后离开，若为 “:wq!”则为强制保存后离开<br>ZZ：若文件没有改动，则不保存离开，若文件已经被更改过，则保存后离开<br>:w[filename]：将编辑的数据保存成另一个文件，类似于另存文件</p><p>vim移动光标大全见： <a href="https://blog.csdn.net/lin20044140410/article/details/50111865" target="_blank" rel="noopener">命令大全&gt;&gt;</a></p><p><img src="https://s1.ax1x.com/2018/07/14/PMJnsg.jpg" width="620" height="400"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1ascii码-unicode码和utf-8&quot;&gt;1.ASCII码、Unicode码和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2generator函数&quot;&gt;2.Generator函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3web-worker&quot;&gt;3.Web Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4fiddler&quot;&gt;4.Fiddler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5模块化&quot;&gt;5.模块化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6浏览器数据库indexeddb&quot;&gt;6.浏览器数据库IndexedDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7sql和nosql&quot;&gt;7.SQL和NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8ddos攻击&quot;&gt;8.DDOS攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9常用命令行&quot;&gt;9.常用命令行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#10vim程序编辑器简单操作&quot;&gt;10.vim程序编辑器简单操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="学习杂记" scheme="https://wtlemoney.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="碎碎念" scheme="https://wtlemoney.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Date-格式化时间戳</title>
    <link href="https://wtlemoney.github.io/2018/06/16/time%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://wtlemoney.github.io/2018/06/16/time格式化/</id>
    <published>2018-06-16T01:31:05.000Z</published>
    <updated>2018-07-14T02:37:53.090Z</updated>
    
    <content type="html"><![CDATA[<p>项目中经常需要将时间表示为<code>yyyy-MM-dd hh:mm:ss</code>的形式，如2018-06-15 12:00:00。<a id="more"></a></p><p><code>new Date();//Fri Jun 15 2018 19:34:20 GMT+0800 (中国标准时间)</code></p><p><code>new Date(1469271264000);//Sat Jul 23 2016 18:54:24 GMT+0800 (中国标准时间)</code></p><p>如上，无论是取得当前的时间，还是通过后台传来的毫秒数进行计算，都不是我们项目想要的时间格式。</p><p>因此，总结下最近用vue实现移动点餐项目中格式化时间戳的方法，好用无比。</p><h4><span id="1拿到后台的ratetime它是毫秒数的形式">1.拿到后台的rateTime，它是毫秒数的形式。</span></h4><p><code>&lt;div class=&quot;time&quot;&gt;{ rating.rateTime | formatDate }&lt;/div&gt;</code><br>以上<code>{A|B}</code>为vue.js中的过滤器，常用于格式化文本。表示A是过滤器B函数的参数。</p><p>注意，这里<code>{...}</code>中的大括号其实应该为双花大括号。只是若写成双花大括号，hexo中会报<code>Template render error:...</code>的错误。</p><p>其中，过滤器可以在两种场景中使用： 双花括号插值 和 v-bind表达式 。详情戳：<a href="https://vuefe.cn/v2/guide/filters.html" target="_blank" rel="noopener">过滤器</a></p><h4><span id="2在filters中定义过滤器formatdate">2.在filters中定义过滤器formatDate。</span></h4><p>此处是将formatDate函数定义在date.js中，便于全局调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;formatDate&#125; <span class="keyword">from</span> <span class="string">'../../common/js/date.js'</span> ;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"> filters: &#123;</span><br><span class="line">        formatDate(time) &#123;</span><br><span class="line">            <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">            <span class="keyword">return</span> formatDate(date,<span class="string">'yyyy-MM-dd hh:mm'</span>); <span class="comment">//date.js</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><h4><span id="3datejs中的formatdate函数">3.date.js中的formatDate函数。</span></h4><p>这里formatDate函数有一个优点:它将可能的时间格式全部都处理了，包括月份是显示‘06’或者‘6’，年份显示‘2018’或者‘18’，只需通过传递给formatDate函数格式即可。</p><p>参数date形如：Fri Jun 15 2018 19:34:20 GMT+0800 (中国标准时间)<br>参数fmt形如：’yyyy-MM-dd hh:mm:ss’,可调整。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date, fmt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123; <span class="comment">// substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。</span></span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">date</span>.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">  &#125; <span class="comment">// RegExp.$1为y的个数</span></span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">'M+'</span>: <span class="built_in">date</span>.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">'d+'</span>: <span class="built_in">date</span>.getDate(),</span><br><span class="line">    <span class="string">'h+'</span>: <span class="built_in">date</span>.getHours(),</span><br><span class="line">    <span class="string">'m+'</span>: <span class="built_in">date</span>.getMinutes(),</span><br><span class="line">    <span class="string">'s+'</span>: <span class="built_in">date</span>.getSeconds()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(fmt)) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = o[k] + <span class="string">''</span>;</span><br><span class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span>) ? <span class="attribute">str</span> : padLeftZero(str));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span>(<span class="params">str</span>) </span>&#123; <span class="comment">//位数不足，就在前面补0</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'00'</span> + str).substr(str.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="4date相关知识总结">4.Date相关知识总结</span></h3><p><strong>js转换Date日期格式</strong></p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="function"><span class="keyword">new</span> <span class="title">Date</span>();  </span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getYear</span>(); <span class="comment">//获取当前年份(2位)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getFullYear</span>(); <span class="comment">//获取完整的年份(4位,1970-????)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getMonth</span>(); <span class="comment">//获取当前月份(0-11,0代表1月)  // 所以获取当前月份是myDate.getMonth()+1;   </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getDate</span>(); <span class="comment">//获取当前日(1-31)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getDay</span>(); <span class="comment">//获取当前星期X(0-6,0代表星期天)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getTime</span>(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getHours</span>(); <span class="comment">//获取当前小时数(0-23)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getMinutes</span>(); <span class="comment">//获取当前分钟数(0-59)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getSeconds</span>(); <span class="comment">//获取当前秒数(0-59)  </span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">getMilliseconds</span>(); <span class="comment">//返回时间的毫秒0-999)  </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">toLocaleDateString</span>(); <span class="comment">//获取当前日期 ,如"2018/6/15"</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">mytime</span>=<span class="title">myDate</span>.<span class="title">toLocaleTimeString</span>(); <span class="comment">//获取当前时间  ,如"下午8:06:06"</span></span></span><br><span class="line"><span class="function"><span class="title">myDate</span>.<span class="title">toLocaleString</span>( ); <span class="comment">//获取日期与时间  ,如"2018/6/15 下午8:06:46"</span></span></span><br></pre></td></tr></table></figure><p><strong>js获取时间戳的方法</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从1970.1.1开始的毫秒数 </span></span><br><span class="line">var <span class="built_in">time</span> =<span class="built_in">Date</span>.<span class="built_in">parse</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// 1529064512000 不推荐,毫秒改成了000显示</span></span><br><span class="line">var <span class="built_in">time</span> =<span class="built_in">Date</span>.<span class="built_in">parse</span>('<span class="number">2018</span>/<span class="number">06</span>/<span class="number">15</span>');<span class="comment">// 1528992000000 将字符串形式的日期转换成日期对象 </span></span><br><span class="line"></span><br><span class="line">var <span class="built_in">time</span> =(<span class="keyword">new</span> <span class="built_in">Date</span>()).valueOf(); <span class="comment">// 1529064638124 </span></span><br><span class="line"></span><br><span class="line">var <span class="built_in">time</span> =<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();  <span class="comment">// 1529064664669</span></span><br></pre></td></tr></table></figure><p>按给定的参数创建一日期对象 : new Date( year, month, date, hrs, min, sec)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中经常需要将时间表示为&lt;code&gt;yyyy-MM-dd hh:mm:ss&lt;/code&gt;的形式，如2018-06-15 12:00:00。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://wtlemoney.github.io/categories/vue/"/>
    
      <category term="Date" scheme="https://wtlemoney.github.io/categories/vue/Date/"/>
    
      <category term="移动点餐项目" scheme="https://wtlemoney.github.io/categories/vue/Date/%E7%A7%BB%E5%8A%A8%E7%82%B9%E9%A4%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="过滤器" scheme="https://wtlemoney.github.io/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
      <category term="filters" scheme="https://wtlemoney.github.io/tags/filters/"/>
    
      <category term="Date" scheme="https://wtlemoney.github.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>vue动画-小球抛物线进购物车</title>
    <link href="https://wtlemoney.github.io/2018/06/14/vue%E6%8A%9B%E7%89%A9%E7%BA%BF%E5%8A%A8%E7%94%BB/"/>
    <id>https://wtlemoney.github.io/2018/06/14/vue抛物线动画/</id>
    <published>2018-06-14T15:37:55.000Z</published>
    <updated>2018-07-14T02:34:43.868Z</updated>
    
    <content type="html"><![CDATA[<p><strong>思路及过程</strong>：</p><ul><li>cartcontrol组件为添加购物车组件，点击该组件内的‘+’号小球，即把小球的位置传给父组件goods,<code>this.$emit(&#39;cart-add&#39;,event.target);</code>event.target为传递的参数，即点击的目标节点。</li></ul><ul><li>在父组件goods的<code>&lt;cartcontrol&gt;</code>中<code>v-on:cart-add=&quot;cartAdd&quot;&gt;</code>监听到cart-add，cartAdd()方法调用，访问子组件shopcart，调用其drop方法，<code>this.$refs.shopcart.drop(el);</code>。</li></ul><ul><li>子组件shopcart为小球抛物线的终点位置，在该组件中定义运动的小球，并定义小球的动画函数。</li></ul><a id="more"></a><p><strong>说明</strong>：</p><ul><li>动画的内容分别是外层和内层,外层控制动画小球的轨道和方向,内层控制动画小球的运行状态</li></ul><ul><li>因为小球动画只有一个方向(只执行单方向从上到下滚落),所以只用了before-enter,enter,after-enter</li></ul><ul><li>设置balls数组来代表五个小球,设置dropBalls数组表示正在运行的小球</li></ul><ul><li>除了用CSS过渡的动画来实现vue的组件过渡，还可以用JavaScript的钩子函数来实现，在钩子函数中直接操作DOM。</li></ul><ul><li>抛物线放在外层就是为了控制内层的元素的轨道和方向的。</li></ul><ul><li>关于getBoundingClientRect(位移的计算是从左上角开始)<ul><li>使用getBoundingClientRect获取到当前元素的坐标,然后需要位移的left减去元素的宽获取真正的最终位移x坐标</li><li>使用getBoundingClientRect获取到当前元素的坐标,然后需要当前屏幕的高度减去元素的top再减去元素本身的高度获取到真正的最终位移y坐标,并且这个是负数,因为是从左上角往下的方向</li></ul></li></ul><ul><li>关于html重绘<ul><li>因为浏览器对于重绘是有要求并且是有队列完成的,这是主要为了性能,虽然动画隐藏了小球display none,但没有触发html重绘,或者说没有立即触发html重绘,所以需要手动</li><li>let rf = el.offsetHeight; 这是一个手动触发html重绘的方法</li><li>推荐文章：<br><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="noopener">网页性能管理详解</a><br><a href="http://www.cnblogs.com/zichi/p/4720000.html" target="_blank" rel="noopener">高性能JavaScript 重排与重绘</a></li></ul></li></ul><p><strong>shopcart组件</strong>：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> class=<span class="string">"ball-container"</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> v-<span class="keyword">for</span>=<span class="string">"(ball,index) in balls"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">          &lt;transition name=<span class="string">"drop"</span> @<span class="keyword">before</span>-enter=<span class="string">"beforeEnter"</span> @enter=<span class="string">"enter"</span> @<span class="keyword">after</span>-enter=<span class="string">"afterEnter"</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">div</span> v-show=<span class="string">"ball.show"</span> class=<span class="string">"ball"</span>&gt;</span><br><span class="line">                  &lt;<span class="keyword">div</span> class=<span class="string">"inner inner-hook"</span>&gt;&lt;/<span class="keyword">div</span>&gt;<span class="comment"> // 使用inner-hook类来单纯被js操作</span></span><br><span class="line">              &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">          &lt;/transition&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attribute">balls</span>: [</span><br><span class="line">                &#123;<span class="attribute">show</span>: <span class="literal">false</span>&#125;,&#123;<span class="attribute">show</span>: <span class="literal">false</span>&#125;,&#123;<span class="attribute">show</span>: <span class="literal">false</span>&#125;,&#123;<span class="attribute">show</span>: <span class="literal">false</span>&#125;,&#123;<span class="attribute">show</span>: <span class="literal">false</span>&#125;</span><br><span class="line">            ],</span><br><span class="line">        <span class="attribute">dropBalls</span>: [],</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">methods</span>: &#123;</span><br><span class="line">       drop(el) &#123;</span><br><span class="line">           <span class="comment">//    console.log(el);</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.balls.length;i++)&#123;</span><br><span class="line">               <span class="keyword">let</span> ball = <span class="keyword">this</span>.balls[i];</span><br><span class="line">               <span class="keyword">if</span>(!ball.show)&#123;</span><br><span class="line">                   ball.show = <span class="literal">true</span>;</span><br><span class="line">                   ball.el = el;</span><br><span class="line">                   <span class="keyword">this</span>.dropBalls.push(ball);</span><br><span class="line">                   <span class="keyword">return</span> ;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line"> beforeEnter(el) &#123;</span><br><span class="line">           <span class="keyword">let</span> count=<span class="keyword">this</span>.balls.length;</span><br><span class="line">           <span class="keyword">while</span>(count--) &#123;</span><br><span class="line">               <span class="keyword">let</span> ball = <span class="keyword">this</span>.balls[count];</span><br><span class="line">               <span class="keyword">if</span>(ball.show)&#123;</span><br><span class="line">                   <span class="keyword">let</span> <span class="built_in">rect</span> = ball.el.getBoundingClientRect();获取某个元素相对于视窗的位置集合。集合中有top, right, bottom, left等属性。</span><br><span class="line">                   <span class="comment">// console.log(rect);</span></span><br><span class="line">                   <span class="keyword">let</span> x = <span class="built_in">rect</span>.left - <span class="number">32</span>; <span class="comment">// 小球动画的起止位置差</span></span><br><span class="line">                   <span class="keyword">let</span> y = -(<span class="built_in">window</span>.innerHeight-<span class="built_in">rect</span>.top<span class="number">-22</span>);</span><br><span class="line">                   el.style.display = <span class="string">""</span>;</span><br><span class="line">                   el.style.webKitTransform=<span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">                   el.style.transform=<span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">                   <span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">'inner-hook'</span>)[<span class="number">0</span>];</span><br><span class="line">                   inner.style.webkitTransform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">                   inner.style.transform=<span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">               &#125; </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       enter(el) &#123;</span><br><span class="line">           <span class="comment">/* eslint-disable no-unused-vars */</span></span><br><span class="line">           <span class="keyword">let</span> rf = el.offsetHeight;<span class="comment">//手动触发浏览器重绘</span></span><br><span class="line">           <span class="keyword">this</span>.$nextTick(()=&gt;&#123; <span class="comment">// 让动画效果异步执行,提高性能</span></span><br><span class="line">               el.style.webKitTransform=<span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">               el.style.transform=<span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">               <span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">'inner-hook'</span>)[<span class="number">0</span>];</span><br><span class="line">               inner.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">               inner.style.transform=<span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line">       afterEnter(el) &#123;</span><br><span class="line">           <span class="keyword">let</span> ball = <span class="keyword">this</span>.dropBalls.shift(); <span class="comment">// 完成一次动画就删除一个dropBalls的小球</span></span><br><span class="line">           <span class="keyword">if</span>(ball)&#123;</span><br><span class="line">               ball.show = <span class="literal">false</span>;</span><br><span class="line">               el.style.display =<span class="string">'none'</span>;<span class="comment">// 隐藏小球</span></span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>goods组件</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;cartcontrol :food=<span class="string">"food"</span> v-on:cart-add=<span class="string">"cartAdd"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">cartcontrol</span>&gt;</span></span></span><br><span class="line">&lt;shopcart ref=<span class="string">'shopcart'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">shopcart</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cartAdd(el) &#123;</span><br><span class="line">   <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="comment">//体验优化，异步执行下落动画</span></span><br><span class="line">       <span class="keyword">this</span>.$refs.shopcart.drop(el);<span class="comment">//访问子组件的drop方法</span></span><br><span class="line">   &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p><strong>cartcontrol组件</strong>：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"cartcontrol"</span>&gt;</span><br><span class="line">        &lt;<span class="attribute">transition</span>-group name=<span class="string">'move'</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> key=<span class="string">"out"</span> class=<span class="string">"cart-decrease"</span> @click<span class="selector-class">.stop</span><span class="selector-class">.prevent</span>=<span class="string">"decreaseCart"</span> v-show=<span class="string">"food.count&gt;0"</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">span</span> key=<span class="string">"in"</span> class=<span class="string">"inner icon-remove_circle_outline"</span>&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/<span class="attribute">transition</span>-group&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"cart-count"</span> v-show=<span class="string">"food.count&gt;0"</span>&gt;&#123;&#123;food.count&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"cart-add icon-add_circle"</span> @click<span class="selector-class">.stop</span><span class="selector-class">.prevent</span>=<span class="string">"addCart"</span>&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span>;<span class="comment">//可使用Vue.set()</span></span><br><span class="line"> export <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        food: &#123;</span><br><span class="line">            type: Object</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addCart(event) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!event._constructed)&#123;<span class="comment">//减少网页点击时的每次双击</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.food.count)&#123;</span><br><span class="line">                <span class="comment">// this.food.count =1;</span></span><br><span class="line">                Vue.<span class="keyword">set</span>(<span class="keyword">this</span>.food,<span class="string">'count'</span>,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.food.count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// this.$dispatch('cart.add',event.target);//vue1.0,把该目标节点传给父组件</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'cart-add'</span>,event.target);</span><br><span class="line">        &#125;,</span><br><span class="line">        decreaseCart() &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.food.count)&#123;</span><br><span class="line">                <span class="keyword">this</span>.food.count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>shopcart组件中小球的样式和贝塞尔曲线：<br>可调整参数来定制曲线，前往网站：<a href="http://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="noopener">贝塞尔曲线</a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.ball-container</span><br><span class="line">    .ball</span><br><span class="line">        <span class="attribute">position</span> fixed</span><br><span class="line">        <span class="attribute">left</span> <span class="number">32px</span></span><br><span class="line">        <span class="attribute">bottom</span> <span class="number">22px</span></span><br><span class="line">        <span class="attribute">z-index</span> <span class="number">200</span></span><br><span class="line">        <span class="attribute">transition</span> all <span class="number">0.4s</span> cubic-bezier(<span class="number">0.49</span>,-<span class="number">0.29</span>,<span class="number">0.75</span>,<span class="number">0.41</span>)</span><br><span class="line">        .inner</span><br><span class="line">            <span class="attribute">width</span> <span class="number">16px</span></span><br><span class="line">            <span class="attribute">height</span> <span class="number">16px</span></span><br><span class="line">            <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">            <span class="attribute">background</span> rgb(<span class="number">0</span>,<span class="number">160</span>,<span class="number">220</span>)</span><br><span class="line">            <span class="attribute">transition</span> all <span class="number">0.4s</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;思路及过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cartcontrol组件为添加购物车组件，点击该组件内的‘+’号小球，即把小球的位置传给父组件goods,&lt;code&gt;this.$emit(&amp;#39;cart-add&amp;#39;,event.target);&lt;/code&gt;event.target为传递的参数，即点击的目标节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在父组件goods的&lt;code&gt;&amp;lt;cartcontrol&amp;gt;&lt;/code&gt;中&lt;code&gt;v-on:cart-add=&amp;quot;cartAdd&amp;quot;&amp;gt;&lt;/code&gt;监听到cart-add，cartAdd()方法调用，访问子组件shopcart，调用其drop方法，&lt;code&gt;this.$refs.shopcart.drop(el);&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;子组件shopcart为小球抛物线的终点位置，在该组件中定义运动的小球，并定义小球的动画函数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="https://wtlemoney.github.io/categories/vue/"/>
    
      <category term="移动点餐项目" scheme="https://wtlemoney.github.io/categories/vue/%E7%A7%BB%E5%8A%A8%E7%82%B9%E9%A4%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="transition" scheme="https://wtlemoney.github.io/tags/transition/"/>
    
      <category term="钩子函数" scheme="https://wtlemoney.github.io/tags/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="贝塞尔曲线" scheme="https://wtlemoney.github.io/tags/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    
      <category term="组件通信" scheme="https://wtlemoney.github.io/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
      <category term="网页性能" scheme="https://wtlemoney.github.io/tags/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0中transition过渡效果</title>
    <link href="https://wtlemoney.github.io/2018/06/13/vue%E8%BF%87%E6%B8%A1/"/>
    <id>https://wtlemoney.github.io/2018/06/13/vue过渡/</id>
    <published>2018-06-13T15:24:49.000Z</published>
    <updated>2018-07-14T02:35:23.488Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1关于过渡的说明">1.关于过渡的说明</a></li><li><a href="#2购物车小球动画实现">2.购物车小球动画实现</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1关于过渡的说明">1.关于过渡的说明</span></h3><p>组件过渡过程中，会有六个CSS类名进行切换，这六个类名transition的name属性有关，比如name=”fade”，会有如下六个CSS类名：</p><ul><li><p><code>fade-enter</code>：定义进入过渡的开始状态，元素被插入时生效，只应用一帧后立即删除；</p></li><li><p><code>fade-enter-active</code>：定义过渡的状态，元素被插入时就生效，在过渡过程完成之后移除；</p></li><li><p><code>fade-enter-to</code>: 定义进入过渡的结束状态。在元素被插入一帧后生效；（ 2.1.8版及以上）</p></li><li><p><code>fade-leave</code>：定义离开过渡的开始状态，元素被删除时触发，只应用一帧后立即删除；</p></li><li><p><code>fade-leave-active</code>：定义离开过渡的状态，元素被删除时生效，离开过渡完成之后被删除；</p></li><li><p><code>fade-leave-to</code>:定义离开过渡的结束状态。在离开过渡被触发一帧后生效；（ 2.1.8版及以上）</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span> all <span class="number">0.5s</span></span><br><span class="line">&amp;<span class="selector-class">.fade-enter-avtive</span>, &amp;<span class="selector-class">.move-leave-active</span>  <span class="comment">//定义动画的过程中的透明度</span></span><br><span class="line">  <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line">&amp;<span class="selector-class">.fade-enter</span>, &amp;<span class="selector-class">.move-leave-to</span>  <span class="comment">//定义动画的开始与动画结束的透明度</span></span><br><span class="line">  <span class="attribute">opacity</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3><span id="2购物车小球动画实现">2.购物车小球动画实现</span></h3><p>如下图，为项目实战中的小球动画：小球从右边+号位置<code>一边平移,一边旋转180°</code>到左边-号位置</p><div align="center"><br><img src="/2018/06/13/vue过渡/ball.gif" alt="img"><br></div><ul><li><p>html结构<br>其中，小球是一个字体图标，通过在i标签中添加相应的class实现的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">transition</span>-group name=<span class="string">'move'</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> key=<span class="string">"out"</span> class=<span class="string">"cart-decrease"</span> @click<span class="selector-class">.stop</span><span class="selector-class">.prevent</span>=<span class="string">"decreaseCart"</span> v-show=<span class="string">"food.count&gt;0"</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">span</span> key=<span class="string">"in"</span> class=<span class="string">"inner icon-remove_circle_outline"</span>&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/<span class="attribute">transition</span>-group&gt;</span><br></pre></td></tr></table></figure></li><li><p>动画思路<br>在整体cart－decrease上实现：<br><code>transform3d（24px,0,0）—&gt; transform3d（0,0,0）</code><br><code>opacity：0 —&gt; opacity: 1</code><br>在.inner标签上实现：<br><code>rotate(180deg) —&gt; rotate(0)</code></p></li><li><p>style样式（stylus）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.cart-decrease</span><br><span class="line">       <span class="attribute">display</span> inline-block</span><br><span class="line">       <span class="attribute">padding</span> <span class="number">6px</span></span><br><span class="line">       <span class="attribute">opacity</span> <span class="number">1</span> //整体进入后透明度为<span class="number">1</span></span><br><span class="line">       <span class="attribute">transform</span> translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">       .inner</span><br><span class="line">           <span class="attribute">display</span> inline-block</span><br><span class="line">           <span class="attribute">line-height</span> <span class="number">24px</span></span><br><span class="line">           <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">           <span class="attribute">color</span> rgb(<span class="number">0</span>,<span class="number">160</span>,<span class="number">220</span>)</span><br><span class="line">           <span class="attribute">transition</span> all <span class="number">0.4s</span> linear //这个不能继承，还需再写一次</span><br><span class="line">           <span class="attribute">transform</span> rotate(<span class="number">0</span>) //进入角度</span><br><span class="line">       &amp;<span class="selector-class">.move-enter-active</span>,&amp;.move-leave-active</span><br><span class="line">           <span class="attribute">transition</span> all <span class="number">0.4s</span> linear </span><br><span class="line">       &amp;<span class="selector-class">.move-enter</span>,&amp;.move-leave-to</span><br><span class="line">           <span class="attribute">opacity</span> <span class="number">0</span> //进入前和离开后整体的透明度</span><br><span class="line">           <span class="attribute">transform</span> translate3d(<span class="number">24px</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">           .inner</span><br><span class="line">               <span class="attribute">transform</span> rotate(<span class="number">180deg</span>)</span><br></pre></td></tr></table></figure><p>其中，<code>&amp;.move-enter-active,&amp;.move-leave-active</code>是小球进入，和离开过程的样式。<br>由于transition: all .8s ease  只能应用到div.decrease上，不能继承到i.inner,所以需要另外在i.inner上写transition: all .8s ease 。<br>另外，<code>.move-enter-active,.move-leave-active</code>可以删除，将<code>transition: all .8s ease</code>添加到<code>.cart-decrease</code> </p></li></ul><p>下面是vue1.0中transition的实现代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">transition</span>=<span class="string">'move'</span> <span class="attr">class</span>=<span class="string">"cart-decrease"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"decreaseCart"</span> <span class="attr">v-show</span>=<span class="string">"food.count&gt;0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner icon-remove_circle_outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.cart-decrease</span><br><span class="line">       <span class="attribute">display</span> inline-block</span><br><span class="line">       <span class="attribute">padding</span> <span class="number">6px</span></span><br><span class="line">       <span class="attribute">transition</span> all <span class="number">0.4s</span> linear      </span><br><span class="line">       &amp;.move-<span class="attribute">transition</span></span><br><span class="line">           <span class="attribute">opacity</span> <span class="number">1</span> //整体进入后透明度为<span class="number">1</span></span><br><span class="line">           <span class="attribute">transform</span> translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">           .inner</span><br><span class="line">               <span class="attribute">display</span> inline-block</span><br><span class="line">               <span class="attribute">line-height</span> <span class="number">24px</span></span><br><span class="line">               <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">               <span class="attribute">color</span> rgb(<span class="number">0</span>,<span class="number">160</span>,<span class="number">220</span>)</span><br><span class="line">               <span class="attribute">transition</span> all <span class="number">0.4s</span> linear //这个不能继承，还需再写一次</span><br><span class="line">               <span class="attribute">transform</span> rotate(<span class="number">0</span>) //进入角度</span><br><span class="line">       &amp;<span class="selector-class">.move-enter</span>,&amp;.move-leave</span><br><span class="line">           <span class="attribute">opacity</span> <span class="number">0</span> //进入前和离开后整体的透明度</span><br><span class="line">           <span class="attribute">transform</span> translate3d(<span class="number">24px</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">           .inner</span><br><span class="line">               <span class="attribute">transform</span> rotate(<span class="number">180deg</span>)</span><br></pre></td></tr></table></figure><p>更多学习：<br><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">进入/离开 &amp; 列表过渡</a><br><a href="https://www.cnblogs.com/jr1993/p/vue.html" target="_blank" rel="noopener">vue2.0 transition – demo实践填坑</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1关于过渡的说明&quot;&gt;1.关于过渡的说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2购物车小球动画实现&quot;&gt;2.购物车小球动画实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="vue" scheme="https://wtlemoney.github.io/categories/vue/"/>
    
      <category term="移动点餐项目" scheme="https://wtlemoney.github.io/categories/vue/%E7%A7%BB%E5%8A%A8%E7%82%B9%E9%A4%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="transition" scheme="https://wtlemoney.github.io/tags/transition/"/>
    
      <category term="stylus" scheme="https://wtlemoney.github.io/tags/stylus/"/>
    
  </entry>
  
  <entry>
    <title>vue1.0和vue2.0中的路由</title>
    <link href="https://wtlemoney.github.io/2018/06/10/vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://wtlemoney.github.io/2018/06/10/vue路由/</id>
    <published>2018-06-10T14:50:31.000Z</published>
    <updated>2018-07-14T02:35:27.972Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1vue10中声明和使用路由">1.vue1.0中声明和使用路由</a></li><li><a href="#2vue10中v-link指令特性">2.vue1.0中v-link指令特性</a></li><li><a href="#3vue20中的路由">3.vue2.0中的路由</a></li><li><a href="#4路由嵌套的不同">4.路由嵌套的不同</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1vue10中声明和使用路由">1.vue1.0中声明和使用路由</span></h3><p>在脚手架中，</p><ul><li>先下载vue-router，在你的项目中用命令行中键入npm install <a href="mailto:vue-router@0.7.13" target="_blank" rel="noopener">vue-router@0.7.13</a>，@后面的数字代表版本号。</li><li>在项目中导入vue-router，导入完了之后用Vue.use()方法来使用路由</li><li>new一个路由对象，在map中配置路由，最后开启路由。</li></ul><p>例子说明，</p><p>在App.vue中，有两个路由映射，这两个映射分别跳到Home.vue和News.vue中：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;template&gt;</span></span><br><span class="line">   <span class="params">&lt;div id="app"&gt;</span></span><br><span class="line">      <span class="params">&lt;h3&gt;</span>vue-loader+ vue-router<span class="params">&lt;/h3&gt;</span></span><br><span class="line">      <span class="params">&lt;div&gt;</span></span><br><span class="line">         <span class="params">&lt;a v-link="&#123;path:'/home'&#125;"&gt;</span>主页<span class="params">&lt;/a&gt;</span></span><br><span class="line">         <span class="params">&lt;a v-link="&#123;path:'/news'&#125;"&gt;</span>新闻<span class="params">&lt;/a&gt;</span></span><br><span class="line">      <span class="params">&lt;/div&gt;</span></span><br><span class="line">      <span class="params">&lt;router-view&gt;</span><span class="params">&lt;/router-view&gt;</span><span class="comment">//路由的视图</span></span><br><span class="line">   <span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/template&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;style&gt;</span></span><br><span class="line">   body&#123;</span><br><span class="line"><span class="symbol">      background:</span> <span class="meta">#ccc</span></span><br><span class="line">   &#125;</span><br><span class="line">   .v-link-active&#123; <span class="comment">//链接活跃时的class</span></span><br><span class="line">      font-size: <span class="number">20</span>px;</span><br><span class="line"><span class="symbol">      color:</span> <span class="meta">#f60;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="params">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>Home.vue和News.vue中内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是新闻<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中配置路由：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>  <span class="comment">//引入一个路由组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);  <span class="comment">//使用被引用的路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span> <span class="comment">//导入被映射的组件</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./components/News.vue'</span> <span class="comment">//导入被映射的组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由，路由是常量，不能变更，所以用const</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="keyword">new</span> VueRouter();</span><br></pre></td></tr></table></figure></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//声明一些路由的规则</span><br><span class="line">router.<span class="keyword">map</span>(&#123;</span><br><span class="line">   <span class="string">'home'</span>:&#123;</span><br><span class="line">      component:Home</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">'news'</span>:&#123;</span><br><span class="line">      component:News</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认打开的组件</span></span><br><span class="line">router.redirect(&#123;</span><br><span class="line">   <span class="string">'/'</span>:<span class="string">'/home'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.start(App,<span class="string">'#app'</span>);  <span class="comment">//打开路由</span></span><br></pre></td></tr></table></figure><p>或者新建一个router.config.js文件，在该文件中这样配置路由：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//专门配置路由规则</span></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./components/News.vue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">   <span class="string">'/home'</span>:&#123;</span><br><span class="line">      component:Home</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">'/news'</span>:&#123;</span><br><span class="line">      component:News</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在原来的main.js中这样调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> routerConfig <span class="keyword">from</span> <span class="string">'./router.config.js'</span>  <span class="comment">//导入router.config.js</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="keyword">new</span> VueRouter();</span><br><span class="line"></span><br><span class="line">router.map(routerConfig);  <span class="comment">//在这里导入配置文件</span></span><br><span class="line"></span><br><span class="line">router.redirect(&#123;</span><br><span class="line">   <span class="string">'/'</span>:<span class="string">'/home'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.start(App,<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure></p><p>最后运行。</p><h3><span id="2vue10中v-link指令特性">2.vue1.0中v-link指令特性</span></h3><p>1）链接活跃时的class<code>.v-link-active</code>：</p><p>一个带有指令v-link=’/a’的元素，只要当前路径以/a开头，此元素就会被判断为活跃。<br>另外，通过exact内联选项,可以设置路径完全一致时才匹配：<code>&lt;a v-link=&quot;{ path: &#39;/a&#39;, exact: true }&quot;&gt;&lt;/a&gt;</code></p><p>2）改变活跃时class：</p><p>方法一：通过创建路由实例时传入linkActiveClass来指定；- - - - 全局</p><p>方法二：通过activeClass内联选项来单独指定,即 <code>&lt;a v-link=&quot;{path:&#39;/a&#39;,activeClass:&#39;own-defined-class&#39;}&quot;</code></p><p>3）v-link内联选项:</p><p>v-link 会自动设置 <code>&lt;a&gt;</code>的 href 属性。</p><blockquote><p>replace:<br>    带有指令v-link的元素默认是触发router.go()事件，保留历史记录；<br>    //设置replace，点击时触发router.replace()，跳转不会留下历史记录：- - -不会留下当前页面的历史记录，会留下目标页面的历史记录；<br>    <code>&lt;a v-link=&quot;{path:&#39;/a&#39;,replace:true}&quot;</code>      </p></blockquote><blockquote><p>append:<br>    //path必须是相对路径；- - -绝对路径不行；<br>    带有append:true选项的相对路径跳转时会将自己的路径添加到当前页面URL路径之后；<br>    <code>&lt;a v-link=&#39;{path:&quot;/a&quot;}&#39;&gt;&lt;/a&gt;</code><br>   <code>&lt;a v-link=&#39;{path:&quot;b&quot;,append:true}&#39;&gt;&lt;/a&gt;</code><br>    //由a跳转至b，生成的URL为/a/b<br>    //如果path:’/b’的话，生成的URL为/b</p></blockquote><h3><span id="3vue20中的路由">3.vue2.0中的路由</span></h3><p>不同点：<br>一般在脚手架中，下载路由不用加版本号，默认下载最新的版本。</p><p>不是在<code>&lt;a&gt;</code>标签中加入v-link这个属性，不需要<code>&lt;a&gt;</code>标签作为映射，直接通过<code>&lt;router-link to=&quot;路径&quot;&gt;</code>来作为映射,在App.vue文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>vue2.0+webpack<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js文件中，<br>配置路由:没有router.map这个写法，是用const routes=[json…]；<br>默认路由：没有router.redirect这个写法，是在const routes中加入{path:’*’,redirect:’/home’}；<br>路由开启：不是<code>router.start(App,&#39;#app&#39;);</code>，而是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>main.js完整代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span> <span class="comment">//引入路由组件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span> <span class="comment">//导入被映射的组件</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./components/News.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter); <span class="comment">//使用被引用的路由</span></span><br><span class="line">Vue.config.debug=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes=[ <span class="comment">//定义路由</span></span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: Home&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'/news'</span>, <span class="attr">component</span>: News&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/home'</span>&#125; <span class="comment">//配置根路由</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="keyword">new</span> VueRouter(&#123;<span class="comment">//实例化路由</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;<span class="comment">//启动路由</span></span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3><span id="4路由嵌套的不同">4.路由嵌套的不同</span></h3><p>1.0中是通过subRoutes来声明一个子路由：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/home'</span>:&#123;</span><br><span class="line">   componen<span class="variable">t:</span> Home,</span><br><span class="line">   subRoute<span class="variable">s:</span>&#123;</span><br><span class="line">      <span class="string">'login'</span>:&#123;</span><br><span class="line">         componen<span class="variable">t:</span> Login</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'reg'</span>:&#123;</span><br><span class="line">         componen<span class="variable">t:</span> Reg</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.0中是在component后面加入children，children相当于上面的routes:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const routes=[</span><br><span class="line">  &#123;<span class="string">path:</span> <span class="string">'/home'</span>, <span class="string">component:</span> Home&#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="symbol">      path:</span> <span class="string">'/news'</span>,</span><br><span class="line"><span class="symbol">      component:</span> News,</span><br><span class="line"><span class="symbol">      children:</span> [</span><br><span class="line">          &#123;<span class="string">path:</span><span class="string">'login'</span>, <span class="string">component:</span> Login&#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="string">path:</span> <span class="string">'*'</span>, <span class="string">redirect:</span> <span class="string">'/home'</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1vue10中声明和使用路由&quot;&gt;1.vue1.0中声明和使用路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2vue10中v-link指令特性&quot;&gt;2.vue1.0中v-link指令特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3vue20中的路由&quot;&gt;3.vue2.0中的路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4路由嵌套的不同&quot;&gt;4.路由嵌套的不同&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="vue" scheme="https://wtlemoney.github.io/categories/vue/"/>
    
      <category term="移动点餐项目" scheme="https://wtlemoney.github.io/categories/vue/%E7%A7%BB%E5%8A%A8%E7%82%B9%E9%A4%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="vue-router" scheme="https://wtlemoney.github.io/tags/vue-router/"/>
    
      <category term="路由" scheme="https://wtlemoney.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>弹性布局下的flex属性值</title>
    <link href="https://wtlemoney.github.io/2018/06/04/flex%E5%B1%9E%E6%80%A7%E5%80%BC/"/>
    <id>https://wtlemoney.github.io/2018/06/04/flex属性值/</id>
    <published>2018-06-04T14:35:42.000Z</published>
    <updated>2018-06-14T15:54:46.282Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1flex属性介绍">1.flex属性介绍</a></li><li><a href="#2flex值的情况">2.flex值的情况</a></li><li><a href="#3实例说明">3.实例说明</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1flex属性介绍">1.flex属性介绍</span></h3><p>首先明确一点是， flex 是 flex-grow、flex-shrink、flex-basis的缩写。</p><ul><li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><ul><li>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p><ul><li>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h3><span id="2flex值的情况">2.flex值的情况</span></h3><ul><li>当 flex 取值为 none，则计算值为 0 0 auto</li><li>当 flex 取值为 auto，则计算值为 1 1 auto</li><li>当 flex 取值为一个非负数字，则计算值为 1 1 0%</li><li>当 flex 取值为一个长度或百分比，则计算值为 1 1 长度或百分比</li><li>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%</li><li>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1</li></ul><h3><span id="3实例说明">3.实例说明</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 600px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-1</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 140px;</span></span><br><span class="line"><span class="undefined">        flex: 2 1 0%;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-2</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        flex: 2 1 auto;</span></span><br><span class="line"><span class="undefined">        background: darkblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-3</span> &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1 1 200px;</span></span><br><span class="line"><span class="undefined">        background: lightblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主轴上父容器总尺寸为 600px</li><li><p>子元素的总基准值是：0% + auto + 200px = 300px，其中</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>% 即 <span class="number">0</span> 宽度</span><br><span class="line">auto 对应取主尺寸即 <span class="number">100</span>px</span><br></pre></td></tr></table></figure></li><li><p>故剩余空间为 600px - 300px = 300px</p></li><li>伸缩放大系数之和为： 2 + 2 + 1 = 5</li><li><p>剩余空间分配如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item<span class="number">-1</span> 和 item<span class="number">-2</span> 各分配 <span class="number">2</span>/<span class="number">5</span>，各得 <span class="number">120</span>px</span><br><span class="line">item<span class="number">-3</span> 分配 <span class="number">1</span>/<span class="number">5</span>，得 <span class="number">60</span>px</span><br></pre></td></tr></table></figure></li><li><p>各项目最终宽度为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item<span class="number">-1</span> = <span class="number">0</span>% + <span class="number">120</span>px = <span class="number">120</span>px</span><br><span class="line">item<span class="number">-2</span> = auto + <span class="number">120</span>px = <span class="number">220</span>px</span><br><span class="line">item<span class="number">-3</span> = <span class="number">200</span>px + <span class="number">60</span>px = <span class="number">260</span>px</span><br></pre></td></tr></table></figure></li></ul><p><br></p><p>参考博文：<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$" target="_blank" rel="noopener">Flex 布局教程</a><br><a href="https://www.w3.org/html/ig/zh/css-flex-1/" target="_blank" rel="noopener">CSS 伸缩盒布局模组</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1flex属性介绍&quot;&gt;1.flex属性介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2flex值的情况&quot;&gt;2.flex值的情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3实例说明&quot;&gt;3.实例说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://wtlemoney.github.io/categories/CSS/"/>
    
      <category term="flex" scheme="https://wtlemoney.github.io/categories/CSS/flex/"/>
    
    
      <category term="CSS" scheme="https://wtlemoney.github.io/tags/CSS/"/>
    
      <category term="弹性盒子" scheme="https://wtlemoney.github.io/tags/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
    
      <category term="flex布局" scheme="https://wtlemoney.github.io/tags/flex%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>mockjs前后端分离</title>
    <link href="https://wtlemoney.github.io/2018/06/02/mockjs/"/>
    <id>https://wtlemoney.github.io/2018/06/02/mockjs/</id>
    <published>2018-06-02T10:00:02.000Z</published>
    <updated>2018-07-26T15:29:20.659Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1mockjs介绍">1.mock.js介绍</a></li><li><a href="#2简单使用mockjs">2.简单使用mockjs</a></li><li><a href="#3vue-cli中使用mockjs">3.vue-cli中使用mockjs</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1mockjs介绍">1.mock.js介绍</span></h3><p>mock.js：是一个模拟数据生成器。可以拦截ajax请求，模拟ajax返回模拟数据，无需后端返回就可以测试前端程序。<br>功能：</p><ul><li><p>根据数据模板生成模板数据</p></li><li><p>模拟ajax请求，生成请求数据</p></li><li><p>基于html模板生成模拟数据</p></li></ul><p>了解详情：<a href="http://mockjs.com/" target="_blank" rel="noopener">mockjs官网</a></p><p>引用官网的图片解释mock.js：<br><img src="/2018/06/02/mockjs/use.jpg" alt="img"><br>推荐能快速生成模拟数据的在线mock服务：<a href="https://www.easy-mock.com" target="_blank" rel="noopener">Easy Mock</a>。学习文档：<a href="https://www.easy-mock.com/docs" target="_blank" rel="noopener">点这里</a></p><div align="center"><br>    <img src="/2018/06/02/mockjs/easy_mock1.jpg" alt="easy mock网站输入界面"><br></div><p>推荐谷歌浏览器中安装json格式化插件：<code>jsonview</code>，能让谷歌浏览器中访问URL地址返回的json数据能按照json格式展现出来。如下图所示：<br><img src="/2018/06/02/mockjs/json.jpg" alt="img"></p><h3><span id="2简单使用mockjs">2.简单使用mockjs</span></h3><ul><li>引入mock.js和JQuery</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建模拟Api，拦截Ajax请求，返回测试数据</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟后台</span></span><br><span class="line">  <span class="type">Mock</span>.mock(<span class="symbol">'http</span>:<span class="comment">//api.com', &#123;</span></span><br><span class="line">      <span class="string">"user|5-10"</span>: [&#123;</span><br><span class="line">          <span class="symbol">'nam</span>e': '<span class="meta">@cname</span>',   <span class="comment">//中文名称</span></span><br><span class="line">          <span class="symbol">'age</span>|<span class="number">1</span><span class="number">-100</span>': <span class="number">100</span>,   <span class="comment">//100以内随机整数</span></span><br><span class="line">          <span class="symbol">'birthda</span>y': '<span class="meta">@date</span>(<span class="string">"yyyy-MM-dd"</span>)',  <span class="comment">//日期</span></span><br><span class="line">          <span class="string">"email"</span>: <span class="string">"@email"</span>,<span class="comment">//邮箱</span></span><br><span class="line">          <span class="symbol">'cit</span>y': '<span class="meta">@city</span>(<span class="literal">true</span>)'   <span class="comment">//中国城市</span></span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>发送ajax请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JQuery方式</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'http://api.com'</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生ajax方式</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">myajax</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">               ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!ajax) &#123;</span><br><span class="line">               <span class="built_in">window</span>.alert(<span class="string">"不能创建XMLHttpRequest对象实例."</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ajax.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br><span class="line">           ajax.send(<span class="literal">null</span>);</span><br><span class="line">           ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(ajax.responseText);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   myajax(<span class="string">'http://api.com'</span>);</span><br></pre></td></tr></table></figure><ul><li>查看响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"user"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"方超"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">13</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1983-04-04"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"k.mjlro@aymnm.mn"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"上海 上海市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"黄强"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">95</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1978-06-02"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"m.yimuaw@jqpg.ma"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"浙江省 杭州市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"阎敏"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1972-12-27"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"j.ietrmoqms@pvswztxg.sd"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"江苏省 淮安市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"梁涛"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1995-06-29"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"y.cvncgqve@vgqkmipc.tn"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"山西省 大同市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"文霞"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">68</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"2008-05-26"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"h.vffs@ssup.tv"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"黑龙江省 双鸭山市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"雷娟"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">56</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1992-02-14"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"h.xddcutf@ehlphhr.it"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"甘肃省 天水市"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3vue-cli中使用mockjs">3.vue-cli中使用mockjs</span></h3><p>首先要保证安装了vue-cli脚手架工具，并初始化项目。</p><p>vue-cli创建完项目,build文件夹下没有dev-server.js文件了，不要慌。这是因为新版本的vue已将dev-server.js与webpack.dev.conf.js合并。所以在模拟后台数据的时候直接在webpack-dev-conf.js文件中修改：</p><div align="center"><br>    <img src="/2018/06/02/mockjs/catalogue.jpg" alt="easy mock网站输入界面"><br></div><p>以我最近跟着大佬学习敲的项目代码为例：</p><ul><li><p>第一步，在<code>const portfinder = require(&#39;portfinder&#39;)</code>后添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过express导入路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">'../data.json'</span>)</span><br><span class="line"><span class="comment">// json卖家数据</span></span><br><span class="line"><span class="keyword">var</span> seller = appData.seller</span><br><span class="line"><span class="comment">// json商品数据</span></span><br><span class="line"><span class="keyword">var</span> goods = appData.goods</span><br><span class="line"><span class="comment">// json评论数据</span></span><br><span class="line"><span class="keyword">var</span> ratings = appData.ratings</span><br><span class="line"><span class="comment">// 编写路由</span></span><br><span class="line"><span class="keyword">var</span> apiRoutes = express.Router()</span><br><span class="line"><span class="comment">// 所有通过接口相关的api都会通过api这个路由导向到具体的路由</span></span><br><span class="line">app.use(<span class="string">'/api'</span>, apiRoutes)</span><br></pre></td></tr></table></figure></li><li><p>第二步，在<code>devServer</code>属性中新添加一个before钩子函数,用来监听来自web的http请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">before (app) &#123;</span><br><span class="line">    app.get(<span class="string">'/api/seller'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 服务端收到请求后返回给客户端一个json数据</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        <span class="comment">// 当我们数据正常时，我们通过传递errno字符为0表示数据正常</span></span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 返回json中的卖家数据</span></span><br><span class="line">        data: seller</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.get(<span class="string">'/api/goods'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: goods</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.get(<span class="string">'/api/ratings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">rea, res</span>) </span>&#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>第三步，在浏览器地址栏中输入localhost:8080/api/goods,可以看到下面的json假数据：<br><img src="/2018/06/02/mockjs/result.png" alt=""></p></li><li><p>第四步，在项目根目录新建data.json文件，复制浏览器json数据到该文件。直接通过ajax调用即可。</p></li></ul><p>注意了：<font color="red">所有的修改配置都需要重新启动运行命令的：npm run dev才能生效（很重要，否则无法请求到数据）！！！</font></p><p>相关博文：<br><a href="https://juejin.im/entry/57bd37c2c4c9710061606b38" target="_blank" rel="noopener">为什么你需要一个 mock server</a><br><a href="http://leeluolee.github.io/2014/10/24/use-puer-helpus-developer-frontend/" target="_blank" rel="noopener">超简单工具puer——“低碳”的前后端分离开发</a><br><a href="https://www.jianshu.com/p/8453b045544f" target="_blank" rel="noopener">使用Mock.js生成前端测试数据</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1mockjs介绍&quot;&gt;1.mock.js介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2简单使用mockjs&quot;&gt;2.简单使用mockjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3vue-cli中使用mockjs&quot;&gt;3.vue-cli中使用mockjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="前后端交互" scheme="https://wtlemoney.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    
      <category term="ajax" scheme="https://wtlemoney.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/ajax/"/>
    
    
      <category term="ajax" scheme="https://wtlemoney.github.io/tags/ajax/"/>
    
      <category term="JSON" scheme="https://wtlemoney.github.io/tags/JSON/"/>
    
      <category term="mock.js" scheme="https://wtlemoney.github.io/tags/mock-js/"/>
    
      <category term="easy mock" scheme="https://wtlemoney.github.io/tags/easy-mock/"/>
    
      <category term="前后端交互" scheme="https://wtlemoney.github.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    
      <category term="数据模拟" scheme="https://wtlemoney.github.io/tags/%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何在VScode中添加代码片段</title>
    <link href="https://wtlemoney.github.io/2018/05/26/vs-snippet/"/>
    <id>https://wtlemoney.github.io/2018/05/26/vs-snippet/</id>
    <published>2018-05-26T14:42:29.000Z</published>
    <updated>2018-06-16T01:29:21.595Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1snippet-配置">1.snippet 配置</a></li><li><a href="#2代码片段">2.代码片段</a></li></ul><!-- tocstop --><a id="more"></a><p>最近在敲vue项目的代码，想对新建的.vue文件初始化代码片段，不然每次都需要重复敲那一段效率太感人了。所以拿vue举例，新建vue文件，输入前缀，出现代码片段。一些snippet语法结构见<a href="https://blog.csdn.net/maokelong95/article/details/54379046" target="_blank" rel="noopener">这里</a></p><h3><span id="1snippet-配置">1.snippet 配置</span></h3><ul><li>进入 snippet 设置文件，这里提供了三种方法： <ul><li>通过快捷键「Ctrl + Shift + P」打开命令窗口（All Command Window），输入「snippet」，点选「首选项：配置用户代码段片段」；</li><li>点击界面最左侧竖栏（也即活动栏）最下方的齿轮按钮，在弹出来的菜单中点选「用户代码片段」；</li><li>按下「Alt」键切换菜单栏，通过文件 &gt; 首选项 &gt; 用户代码片段；</li></ul></li><li>vue.json文件中，填写 snippets</li></ul><h3><span id="2代码片段">2.代码片段</span></h3><p>vue.json初始文件代码定义了一个名为「Print to console」的 snippet，其功能为：在输入 log 并确认后，可将原文本替换为<code>console.log(&#39;&#39;);</code>。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> // Place your snippets <span class="keyword">for</span> C here. Each snippet <span class="built_in">is</span> defined under a snippet name <span class="keyword">and</span> has a <span class="built_in">prefix</span>, body <span class="keyword">and</span> </span><br><span class="line"> // description. The <span class="built_in">prefix</span> <span class="built_in">is</span> what <span class="built_in">is</span> used to trigger the snippet <span class="keyword">and</span> the body will be expanded <span class="keyword">and</span> inserted. Possible variables are:</span><br><span class="line"> // $<span class="number">1</span>, $<span class="number">2</span> <span class="keyword">for</span> <span class="built_in">tab</span> stops, $<span class="number">0</span> <span class="keyword">for</span> the final cursor <span class="built_in">position</span>, <span class="keyword">and</span> $&#123;<span class="number">1</span>:<span class="built_in">label</span>&#125;, $&#123;<span class="number">2</span>:another&#125; <span class="keyword">for</span> placeholders. Placeholders with the </span><br><span class="line"> // same ids are connected.</span><br><span class="line"> // Example:</span><br><span class="line"> <span class="string">"Print to console"</span>: &#123;</span><br><span class="line">    <span class="string">"prefix"</span>: <span class="string">"log"</span>,</span><br><span class="line">    <span class="string">"body"</span>: [</span><br><span class="line">        <span class="string">"console.log('$1');"</span>,</span><br><span class="line">        <span class="string">"$2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Log output to console"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>prefix ： 在 Intellisense 中选择代码片段时将使用的前缀。</p><p>$1          :这个为光标的所在位置.<br>$2          :使用这个参数后会光标的下一位置将会另起一行,按tab键可进行快速切换,还可以有$3,$4,$5…..</p><p>body：代码片段的内容。使用“$1”和“${1:defaultText}”定义光标位置，使用“$0”定义最终光标位置。使用“${varName}”和“${varName:defaultText}”插入变量值，例如“这是文件：$TM_FILENAME”。字符串间换行的话使用\r\n换行符隔开。注意如果值里包含特殊字符需要进行转义。</p><p>description：代码片段描述。</p><p>3.自定义.vue文件代码片段<br>在vue.json文件中添加下面代码，新建.vue文件-&gt;输入vue -&gt;按tab即可创建vue模板。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Print to .vue"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"&lt;template&gt;"</span>,</span><br><span class="line">            <span class="string">" &lt;div&gt;\n"</span>,</span><br><span class="line">            <span class="string">" &lt;/div&gt;"</span>,</span><br><span class="line">            <span class="string">"&lt;/template&gt;\n"</span>,</span><br><span class="line">            <span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">            <span class="string">" export default &#123;"</span>,</span><br><span class="line">            <span class="string">"   data () &#123;"</span>,</span><br><span class="line">            <span class="string">"     return &#123;\n"</span>,</span><br><span class="line">            <span class="string">"     &#125;"</span>,</span><br><span class="line">            <span class="string">"   &#125;,"</span>,</span><br><span class="line">            <span class="string">"   components: &#123;\n"</span>,</span><br><span class="line">            <span class="string">"   &#125;"</span>,</span><br><span class="line">            <span class="string">" &#125;"</span>,</span><br><span class="line">            <span class="string">"&lt;/script&gt;\n"</span>,</span><br><span class="line">            <span class="string">"&lt;style&gt;\n"</span>,</span><br><span class="line">            <span class="string">" "</span>,</span><br><span class="line">            <span class="string">"&lt;/style&gt;"</span>,</span><br><span class="line">            <span class="string">"$2"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"Log output to console"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的vue模板为：</p><div align="center"><br>    <img src="/2018/05/26/vs-snippet/vue.jpg" alt="easy mock网站输入界面"><br></div><p>参考博文：<a href="https://blog.csdn.net/maokelong95/article/details/54379046" target="_blank" rel="noopener">跟我一起在Visual Studio Code 添加自定义snippet</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1snippet-配置&quot;&gt;1.snippet 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2代码片段&quot;&gt;2.代码片段&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="VScode" scheme="https://wtlemoney.github.io/categories/VScode/"/>
    
    
      <category term="VScode" scheme="https://wtlemoney.github.io/tags/VScode/"/>
    
      <category term="vue" scheme="https://wtlemoney.github.io/tags/vue/"/>
    
      <category term="代码段" scheme="https://wtlemoney.github.io/tags/%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>ps切图</title>
    <link href="https://wtlemoney.github.io/2018/05/22/ps%E5%88%87%E5%9B%BE/"/>
    <id>https://wtlemoney.github.io/2018/05/22/ps切图/</id>
    <published>2018-05-22T03:46:17.000Z</published>
    <updated>2018-06-14T15:59:03.710Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1界面设置">1.界面设置</a></li><li><a href="#2ps参考线及其辅助">2.PS参考线及其辅助</a></li><li><a href="#3快捷操作">3.快捷操作</a></li><li><a href="#4选择工具操作">4.选择工具操作</a></li><li><a href="#5简单工具操作">5.简单工具操作</a></li><li><a href="#6实战笔记">6.实战笔记</a></li><li><a href="#7切图">7.切图</a></li></ul><!-- tocstop --><a id="more"></a><p>切图这种事情，不一定要UI来做啦，因为UI有时候切的前端童鞋可能不满意呢，来来回回有这沟通的时间还不如自己做了呢…</p><h3><span id="1界面设置">1.界面设置</span></h3><p>为啥先要把界面设置一下？原因就是网页设计需要重新定义ps界面，这样有利于工作的展开。</p><p>新建：文件-&gt;新建-&gt;Web（像素1920*2000，高度不定，分辨率72，背景透明）<br>设置：视图-&gt;勾选标尺，视图-&gt;显示-&gt;勾选智能参考线，编辑-&gt;首选项-&gt;单位与标尺-&gt;单位改为像素<br>切图四大面板窗口（右侧）：信息、字符，图层、历史记录（点击窗口菜单进行勾选）<br>信息面板右上角点击-面板选项，颜色信息都使用rgb颜色，标尺单位使用像素，文档大小和文档尺寸勾上<br>保存工作区：窗口-&gt;工作区-&gt;新建工作区</p><h3><span id="2ps参考线及其辅助">2.PS参考线及其辅助</span></h3><p>Ctrl + R :标尺快捷键<br>Alt + V + E :新建参考线<br>Alt + V + E + H :新建水平参考线<br>Alt + V + E + V :新建垂直参考线<br>Ctrl + ; :关闭/开启参考线显示；<br>移动参考线的同时可使用 Alt 键改变方向<br>删除参考线将其拖回到标尺位置即可</p><h3><span id="3快捷操作">3.快捷操作</span></h3><p>自动选中当前点击的图层：按住Ctrl键，鼠标点击psd上的图层选中（左键单击），即可实现自动选择功能<br>形成选区：Ctrl + 鼠标左键点击右下角图层，可以在信息中获取到宽高等信息，字符中可以获取到字体大小等信息<br>H+鼠标左键快速锁定放大某一块区域：放大镜状态下，H+鼠标左键 显示框出现，选择区域，松开会显示框住的图的大图<br>Alt+Delete：前景色填充<br>Ctrl+Delete：背景色填充 </p><h3><span id="4选择工具操作">4.选择工具操作</span></h3><p>选区工具：快捷键 M<br>Shift + M 在扩展中轮流切换图形<br>Shift键 ：添加选区<br>Alt键 ：减少选区<br>按shift键：画正圆（方）<br>按Shift+Alt：以当前像素点为圆心画正圆（方）</p><p>套索工具：快捷键 L<br>不规则形状选区<br>Shift键 + 鼠标左键 增加选择区域<br>Alt键 + 鼠标左键 删除规则的选区区域<br>多边形套索工具(双击鼠标左键选区自动闭合)<br>磁性套索工具(会根据颜色进行判断，是和获取不规则图形)</p><p>快速选择工具：快捷键 W<br>尽量选择闭合的图像<br>调整工具的大小 快捷键：中括号 花括号<br>删除选区：快捷键 Ctrl + D</p><p>裁剪工具：快捷键 C<br>裁剪需要的一部分，图片边际会出现可调整的按钮<br>先建立选区再点裁剪工具，可以直接裁剪当前选区内的内容，裁剪比较精确<br>属性栏中的对钩：只留下裁剪区域，其他地方被裁掉<br>小技巧：按住Ctrl单击需要的图片，按住Ctrl单击右下角的图层，会自动出现选区，这时选择左侧工具栏的裁剪，会默认选区，按回车键完成裁剪 单击对钩或者回车就裁剪好了<br>用套索工具选择好不规则图形后点击裁剪，会以最小范围裁剪出图形，按住Alt键单击右下角图层前的眼睛，会把背景变为透明，获取到图层</p><h3><span id="5简单工具操作">5.简单工具操作</span></h3><p>污点修复画笔工具：快捷键 J,从点击周围来取素材再做一个融合<br>修复画笔工具:Alt+鼠标左键取素材，放开Alt,点击左键移动鼠标，复用某个地方的素材<br>修补工具：将修补区域圈起来，按住鼠标左键拖动，放开后，放开区域会和圈的区域融合可以盖掉涂抹工具</p><p>画笔工具（B）：可以通过左上的属性面板调节硬度来实现画出来的轮廓的模糊程度<br>铅笔工具：画出的效果带毛边，硬度调到最小，画出的依然比较生硬<br>仿制图章工具（S）：Alt+鼠标左键取素材，放开Alt,点击左键移动鼠标。取到的素材，什么样子画出来就是什么样子；与修复画笔不同的是，修复画笔松开左键会羽化图片边缘<br>图案图章工具：ps库中存在的图案</p><p>历史记录画笔工具(Y)：打开历史记录面板，将历史记录画笔放在前面的方框内，点回原图，这时，画笔就带有历史记录，可以在原图上进行局部处理。</p><p>橡皮擦工具（E）：设置背景颜色后，使用橡皮擦，擦过的地方会被背景颜色填充。<br>背景橡皮擦工具：会将图片直接擦掉，露出背景图层。<br>魔术橡皮擦工具:颜色相同区域，会被全部直接擦掉，露出背景图层。</p><p>渐变工具（G）：设置前景色和背景色后，在图层上拉动，会出现渐变效果，属性面板上有各种渐变方式。</p><p>锐化工具：内容会变得干燥<br>涂抹工具：类似画板上画完画，用手抹一下,比如加长睫毛<br>画笔工具：可调整画笔硬度和大小<br>铅笔工具：线条细且硬，也可调整画笔硬度和大小<br>减淡工具（O）：使脸部皮肤变白</p><p>钢笔工具：第一次确定一个点，第二次点击的时候按住shift可以调节直线的弧度，松开后按住alt键可以调节弧度。<br>路径（钢笔工具）+文字（文字工具）=按路径排列的文字</p><h3><span id="6实战笔记">6.实战笔记</span></h3><p>画圆选区：<br>椭圆选区-&gt;Shift+左键（先放开鼠标再放开shift键），alt+delete填充颜色<br>切换为选区工具-&gt;右键-&gt;变换选区-&gt;Alt+Shift+鼠标左键：同圆心缩小-&gt;确定-&gt;Delete（删掉小圆内部颜色 ）<br>Ctrl+T：自由变换<br>移动工具-&gt;Alt+拖动：复制并且自动新建图层<br>CTRL+在图层缩览图中单击：选中图层选区，然后可以用吸管工具对这一选区填充颜色<br>按住Ctrl键，然后点击图片区域，会自动选中该图层，对该图层进行操作<br>裁剪：按住Alt键，会以图像为中心建立裁剪区域<br>五环相连：CTRL+在图层缩览图中单击蓝色环，再选中黄色环图层，矩形选框-&gt;按住Alt减去黄色环要保留的部分，最后delete,可以去掉黄色部分被选中的小块</p><h3><span id="7切图">7.切图</span></h3><p>裁剪-&gt;切片工具：灰色代表被动切片，蓝色代表主动切片<br>裁剪图片-&gt;建立参考线-&gt;基于参考线的切片<br>导出切片：文件-&gt;存储为web所用格式-&gt;PNG-24-&gt;存储</p><p>自动切图：<br>文件-&gt;脚本-&gt;将图层导出为文件-&gt;PNG-24-&gt;透明区域、交错、裁剪图层-&gt;运行：自动切图，且文件命名即为存储前缀+图层名，图片阴影也会切出，有多少图层切出多少张图<br>优点：自动把每个图层剪切为适当大小，图像名后缀为图层名。<br>缺点：运行慢，对配置要求较高，对图层较少的图片较方便。</p><p>图片自动导出生成：</p><ul><li>编辑-&gt;首选项-&gt;增效工具-&gt;勾选启用生成器</li><li>文件-&gt;生成-&gt;勾选图像资源</li><li>随后重命名图层/组为xxx.png名称，将会自动生成相应图片到assets文件夹中</li></ul><p>其他类型导出：</p><ul><li>将图层/组重命名为.jpg、.png，删除切图：还原图层名称</li><li>retina导出：重命名为200% xxx @2x.jpg</li></ul><p>导出SVG格式：</p><ul><li>选择对应的图层或图层文件夹 </li><li>选择 文件-&gt;抽出资源，然后选择SVG格式</li></ul><p>复制CSS：</p><ul><li>选择对应的图层</li><li>选择 图层-&gt;复制CSS</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1界面设置&quot;&gt;1.界面设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2ps参考线及其辅助&quot;&gt;2.PS参考线及其辅助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3快捷操作&quot;&gt;3.快捷操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4选择工具操作&quot;&gt;4.选择工具操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5简单工具操作&quot;&gt;5.简单工具操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6实战笔记&quot;&gt;6.实战笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7切图&quot;&gt;7.切图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="PS" scheme="https://wtlemoney.github.io/categories/PS/"/>
    
    
      <category term="工具" scheme="https://wtlemoney.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PS" scheme="https://wtlemoney.github.io/tags/PS/"/>
    
      <category term="切图" scheme="https://wtlemoney.github.io/tags/%E5%88%87%E5%9B%BE/"/>
    
      <category term="UI" scheme="https://wtlemoney.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题</title>
    <link href="https://wtlemoney.github.io/2018/05/16/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://wtlemoney.github.io/2018/05/16/跨域问题/</id>
    <published>2018-05-16T13:05:13.000Z</published>
    <updated>2018-06-14T15:58:16.213Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1同源策略">1.同源策略</a></li><li><a href="#2跨域资源共享cors">2.跨域资源共享CORS</a></li><li><a href="#3jsonp">3.jsonp</a></li><li><a href="#4documentdomain">4.document.domain</a></li><li><a href="#5windowname">5.window.name</a></li></ul><!-- tocstop --><a id="more"></a><h4><span id="1同源策略">1.同源策略</span></h4><p>同源：协议、域名、端口都相同<br>目的：保证用户信息的安全，防止恶意的网站窃取数据。<br>受到同源限制：</p><ul><li>无法读取不同源的 Cookie、LocalStorage 和 IndexDB 。</li><li>无法获得不同源的DOM 。</li><li>不能向不同源的服务器发送ajax请求</li></ul><p>不受同源限制：</p><ul><li>在浏览器中，<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;、&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制。</li></ul><h4><span id="2跨域资源共享cors">2.跨域资源共享CORS</span></h4><p>CORS定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。基本思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。</p><p>CORS机制把跨域请求分为两类：简单请求和非简单请求。<br>浏览器对这两种请求的处理，是不一样的。凡是不同时满足下面两个条件，就属于非简单请求。</p><blockquote><p>1) 请求方法是以下三种方法之一：HEAD、GET、POST<br>2）HTTP的头信息不超出以下几种字段：<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p></blockquote><p><strong>简单请求</strong>：浏览器会带上Origin的请求头发送到服务器，服务器根据Origin判断是否许可。如果许可就会带上CORS相关想要头，如果不在许可范围内就不会带上CORS相关的响应头。浏览器再根据响应头中是否有相关的CORS响应头，来判断拦截响应body和抛出错误。<br><strong>非简单请求</strong>：非简单请求会在发真正的请求之前发送一个OPTIONS的带着Origin、Access-Control-Request-Method、Access-Control-Request-Headers等CORS相关的请求头的预检请求到服务器，服务器确认可以这样请求，就会返回带着Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers等CORS相关的响应头的响应，浏览器检查到相关的CORS响应头，说明通过预检可以继续发送真正的请求；服务器确认不可以，则不会返回这些相关响应头，浏览器没检查到CORS的响应头就会抛出错误。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br>服务器要给接口的响应头设置：<code>Access-Control-Allow-Origin：＊</code></p><h4><span id="3jsonp">3.jsonp</span></h4><p>jsonp解决跨域问题的本质： <code>&lt;script&gt;</code> 标签可以请求不同域名下的资源，即 <code>&lt;script&gt;</code>请求不受浏览器同源策略影响。<br>缺点：只能处理get请求<br>首先给body动态添加一个 <code>&lt;script&gt;</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</span><br><span class="line">script.src = <span class="string">'http://example.com/ip?callback=foo'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Your public IP address is: '</span> + data.ip);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的script会向 <code>http://example.com/</code> 服务器发送请求，这个请求的url后面带了个callback参数，是用来告诉服务器回调方法的方法名的。因为服务器收到请求后，会把相应数据写进foo的参数位置，也就是说服务器会返回的脚本如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo(&#123;</span><br><span class="line">    <span class="string">"ip"</span>: <span class="string">"8.8.8.8"</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>这样浏览器通过<code>&lt;script&gt;</code>下载的资源就是上面的脚本了，<code>&lt;script&gt;</code>下载完成就会立即执行，也就是说<code>http://example.com/ip?callback=foo</code>这个请求返回后就会立即执行上面的脚本代码，而这个脚本代码就是调用回调方法和拿到json数据了。</p><h4><span id="4documentdomain">4.document.domain</span></h4><p><strong>场景1</strong>：你的<code>http://www.damonare.cn/a.html</code>页面里使用<code>&lt;iframe&gt;</code>调用另一个<code>http://damonare.cn/b.html</code>页面。这时候你想在a页面里获取b页面里的dom，然后进行操作。然后你会发现你不能获得b的dom。</p><p><strong>解决方案</strong>：这时候你只需要在a页面里和b页面里把<code>document.domain</code>设置成相同的值就可以在两个页面里操作Dom了。</p><p><strong>场景2</strong>：你在<code>http://www.damonare.cn/a.html</code>页面里写入了<code>document.cookie = &quot;test1=hello&quot;;</code>你在<code>http://damonare.cn/b.html</code>页面是拿不到这个cookie的。</p><p><strong>解决方案</strong>：Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享 Cookie。另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名。这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p><p><strong>注意</strong>：<br><code>document.domain</code>限制：虽然可读写，但只能设置成自身或者是高一级的父域且主域必须相同。所以只能解决一级域名相同二级域名不同的跨域问题。<br><code>document.domain</code>只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexDB 无法通过这种方法跨域。</p><h4><span id="5windowname">5.window.name</span></h4><p><strong>场景1</strong>：现在浏览器的一个标签页里打开<code>http://www.damonare.cn/a.html</code>页面，你通过<code>location.href=http://baidu.com/b.html</code>，在同一个浏览器标签页里打开了不同域名下的页面。这时候这两个页面你可以使用window.name来传递参数。因为window.name指的是浏览器窗口的名字，只要浏览器窗口相同，那么无论在哪个网页里访问值都是一样的。</p><p><strong>场景2</strong>：你的<code>http://www.damonare.cn/a.html</code>页面里使用<code>&lt;iframe&gt;</code>调用另一个<code>http://baidu.com/b.html</code>页面。这时候你想在a页面里获取b页面里的dom，然后进行操作。然后你会发现你不能获得b的dom。同样会因为不同源而报错，和上面提到的不同之处就是两个页面的一级域名也不相同。这时候document.domain就解决不了了。</p><p><strong>解决方案</strong>：浏览器窗口有window.name属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。。比如你在b页面里设定<code>window.name=&quot;hello&quot;</code>，你再返回到a页面，在a页面里访问window.name，可以得到hello。</p><p>这种方法的优点是，window.name容量很大，可以放置非常长的字符串；缺点是必须监听子窗口window.name属性的变化，影响网页性能。</p><p>参考博文：<br><a href="https://www.jianshu.com/p/438183ddcea8" target="_blank" rel="noopener">浏览器同源策略与ajax跨域方法汇总</a><br><a href="http://blog.damonare.cn/2016/12/01/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">前端跨域整理</a><br><a href="https://segmentfault.com/a/1190000012158485" target="_blank" rel="noopener">跨域问题汇总</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1同源策略&quot;&gt;1.同源策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2跨域资源共享cors&quot;&gt;2.跨域资源共享CORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3jsonp&quot;&gt;3.jsonp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4documentdomain&quot;&gt;4.document.domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5windowname&quot;&gt;5.window.name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="前后端交互" scheme="https://wtlemoney.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    
      <category term="ajax" scheme="https://wtlemoney.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/ajax/"/>
    
    
      <category term="ajax" scheme="https://wtlemoney.github.io/tags/ajax/"/>
    
      <category term="同源策略" scheme="https://wtlemoney.github.io/tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
      <category term="跨域" scheme="https://wtlemoney.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="CORS" scheme="https://wtlemoney.github.io/tags/CORS/"/>
    
      <category term="jsonp" scheme="https://wtlemoney.github.io/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>SCSS进阶学习（二）</title>
    <link href="https://wtlemoney.github.io/2018/05/12/SCSS-2/"/>
    <id>https://wtlemoney.github.io/2018/05/12/SCSS-2/</id>
    <published>2018-05-12T05:12:36.000Z</published>
    <updated>2018-06-15T16:41:38.886Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1sass的控制命令">1.Sass的控制命令</a><ul><li><a href="#11if和else">1.1@if和@else</a></li><li><a href="#12for">1.2@for</a></li><li><a href="#13while">1.3@while</a></li><li><a href="#14each">1.4@each</a></li></ul></li><li><a href="#2sass的函数功能">2.Sass的函数功能</a><ul><li><a href="#21字符串函数">2.1字符串函数</a></li><li><a href="#22数字函数">2.2数字函数</a></li><li><a href="#23列表函数">2.3列表函数</a></li><li><a href="#24颜色函数">2.4颜色函数</a></li><li><a href="#25其他函数">2.5其他函数</a></li></ul></li><li><a href="#3sass的规则">3.Sass的@规则</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1sass的控制命令">1.Sass的控制命令</span></h3><h4><span id="11if和else">1.1@if和@else</span></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="variable">@mixin</span> blockOrHidden($<span class="attribute">boolean</span>:true) &#123;</span><br><span class="line">  <span class="variable">@if</span> $boolean &#123;</span><br><span class="line">      <span class="variable">@debug</span> <span class="string">"$boolean is #&#123;$boolean&#125;"</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="variable">@else</span> &#123;</span><br><span class="line">      <span class="variable">@debug</span> <span class="string">"$boolean is #&#123;$boolean&#125;"</span>;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.block &#123;</span><br><span class="line">  <span class="variable">@include</span> blockOrHidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hidden&#123;</span><br><span class="line">  <span class="variable">@include</span> blockOrHidden(false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出来的CSS:</span></span><br><span class="line">.block &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hidden &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="12for">1.2@for</span></h4><p><strong>两种方式:</strong></p><ul><li><code>@for $i from &lt;start&gt; through &lt;end&gt;</code></li><li><code>@for $i from &lt;start&gt; to &lt;end&gt;</code></li></ul><p><strong>区别：</strong>through 表示包括 end 这个数，而 to 则不包括 end 这个数。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 3 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出来的 CSS:</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若为through，还应包括.item-3&#123;...&#125;</span></span><br></pre></td></tr></table></figure></p><p>@for命令在网格系统非常好用，来一段比较难的代码。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="variable">$grid-prefix</span>: span !default;</span><br><span class="line"><span class="variable">$grid-width</span>: <span class="number">60px</span> !default;</span><br><span class="line"><span class="variable">$grid-gutter</span>: <span class="number">20px</span> !default;</span><br><span class="line"></span><br><span class="line">%grid &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="variable">$grid-gutter</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="variable">$grid-gutter</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 12 &#123;</span><br><span class="line">  .#&#123;<span class="variable">$grid-prefix</span>&#125;#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$grid-width</span> * <span class="variable">$i</span> + <span class="variable">$grid-gutter</span> * (<span class="variable">$i</span> - <span class="number">1</span>);</span><br><span class="line">    @<span class="keyword">extend</span> %grid;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.span1</span>, <span class="selector-class">.span2</span>, <span class="selector-class">.span3</span>, <span class="selector-class">.span4</span>, <span class="selector-class">.span5</span>, <span class="selector-class">.span6</span>, <span class="selector-class">.span7</span>, <span class="selector-class">.span8</span>, <span class="selector-class">.span9</span>, <span class="selector-class">.span10</span>, <span class="selector-class">.span11</span>, <span class="selector-class">.span12</span> &#123;<span class="comment">//其宽度依次60px,140px,.....</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h4><span id="13while">1.3@while</span></h4><p>嗨呀，直接看代码吧，就这么用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="variable">$types</span>: <span class="number">3</span>;</span><br><span class="line"><span class="variable">$type-width</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">while</span> <span class="variable">$types</span> &gt; 0 &#123;</span><br><span class="line">    <span class="selector-class">.while-</span>#&#123;<span class="variable">$types</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">$type-width</span> + <span class="variable">$types</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$types</span>: <span class="variable">$types</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出来的 CSS</span></span><br><span class="line"><span class="selector-class">.while-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.while-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.while-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="14each">1.4@each</span></h4><p>@each 循环就是去遍历一个列表，然后从列表中取出对应的值。形式：<code>@each $var in &lt;list&gt;</code><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="variable">$list</span>: adam john wynn mason kuroir;<span class="comment">//$list 就是一个列表</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> author-images &#123;</span><br><span class="line">    @<span class="keyword">each</span> <span class="variable">$author</span> in <span class="variable">$list</span> &#123;</span><br><span class="line">        <span class="selector-class">.photo-</span>#&#123;<span class="variable">$author</span>&#125; &#123;</span><br><span class="line">            <span class="attribute">background</span>: url(<span class="string">"/images/avatars/#&#123;$author&#125;.png"</span>) no-repeat;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.author-bio</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> author-images;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出 CSS:</span></span><br><span class="line"><span class="selector-class">.author-bio</span> <span class="selector-class">.photo-adam</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"/images/avatars/adam.png"</span>) no-repeat; &#125;</span><br><span class="line"><span class="selector-class">.author-bio</span> <span class="selector-class">.photo-john</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"/images/avatars/john.png"</span>) no-repeat; &#125;</span><br><span class="line"><span class="selector-class">.author-bio</span> <span class="selector-class">.photo-wynn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"/images/avatars/wynn.png"</span>) no-repeat; &#125;</span><br><span class="line"><span class="selector-class">.author-bio</span> <span class="selector-class">.photo-mason</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"/images/avatars/mason.png"</span>) no-repeat; &#125;</span><br><span class="line"><span class="selector-class">.author-bio</span> <span class="selector-class">.photo-kuroir</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"/images/avatars/kuroir.png"</span>) no-repeat; &#125;</span><br></pre></td></tr></table></figure></p><h3><span id="2sass的函数功能">2.Sass的函数功能</span></h3><h4><span id="21字符串函数">2.1字符串函数</span></h4><ul><li>unquote($string)：删除字符串中的引号。unquote函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。</li><li>quote($string)：给字符串添加引号。如果字符串自身带有引号会统一换成双引号 “”。使用 quote函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。同时 quote() 碰到特殊符号，比如： !、?、&gt; 等，除中折号 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错。</li><li>to-upper-case() : 字符串转大写</li><li>to-lower-case() : 字符串转小写</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="selector-class">.test1</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:  unquote(<span class="string">'Hello Sass!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test2</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: quote(<span class="string">"Hello Sass!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  text: to-upper-case(aaaaa);</span><br><span class="line">  text: to-lower-case(aA-aAAA-aaa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.test1</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: Hello Sass!; &#125;</span><br><span class="line"><span class="selector-class">.test2</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Hello Sass!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  text: AAAAA;</span><br><span class="line">  text: aa-aaaa-aaa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="22数字函数">2.2数字函数</span></h4><ul><li>percentage($value)：将一个<strong>不带单位</strong>的数转换成百分比值；</li><li>round($value)：将数值四舍五入，转换成一个最接近的整数；</li><li>ceil($value)：将大于自己的小数转换成下一位整数；</li><li>floor($value)：将一个数去除他的小数部分；</li><li>abs($value)：返回一个数的绝对值；</li><li>min($numbers…)：找出几个数值之间的最小值；</li><li>max($numbers…)：找出几个数值之间的最大值；</li><li>random(): 获取随机数</li></ul><p>注意：<br>在round,ceil,floor 函数中可以携带单位的任何数值。<br>在 min,max函数中同时出现两种不同类型的单位，将会报错误信息.<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">width</span> : percentage(.<span class="number">2</span>);  <span class="comment">//width : 20%</span></span><br><span class="line"><span class="attribute">width</span>:round(<span class="number">12.3px</span>);  <span class="comment">//width : 12px</span></span><br><span class="line"><span class="attribute">width</span>:round(<span class="number">3px</span> / <span class="number">2em</span>);  <span class="comment">//width : 2px/em</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="23列表函数">2.3列表函数</span></h4><ul><li>length($list)：返回一个列表的长度值；</li><li>nth($list, $n)：返回一个列表中指定的某个标签值，从1开始</li><li>join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</li><li>append($list1, $val, [$separator])：将某个值放在列表的最后；</li><li>zip($lists…)：将几个列表结合成一个多维的列表；</li><li>index($list, $value)：返回一个值在列表中的位置值。</li></ul><p><strong>注意：</strong><br>length() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错。<br>join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错。可将多个 join函数合并在一起使用。可选参数：comma和space，分别表示以逗号和空格分隔。<br>append()可选参数comma和space。<br>zip()函数中每个单一列表的值对应的取其相同位置值,在使用zip()函数时，每个单一的列表个数值必须是相同的。<br>index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false，相反就会返回对应的值在列表中所处的位置。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">length(<span class="number">10</span>px <span class="number">20</span>px (border <span class="number">1</span>px solid) <span class="number">2</span>em);  <span class="comment">//4</span></span><br><span class="line">nth((Helvetica,Arial,sans-serif),<span class="number">2</span>);  <span class="comment">//"Arial"</span></span><br><span class="line">join(<span class="number">10</span>px <span class="number">20</span>px, <span class="number">30</span>px <span class="number">40</span>px);  <span class="comment">//(10px 20px 30px 40px)</span></span><br><span class="line">append(<span class="number">10</span>px <span class="number">20</span>px ,<span class="number">30</span>px);  <span class="comment">//(10px 20px 30px)</span></span><br><span class="line">zip(<span class="number">1</span>px <span class="number">2</span>px <span class="number">3</span>px,solid dashed dotted,green blue red);  <span class="comment">//((1px "solid" #008000), (2px "dashed" #0000ff), (3px "dotted" #ff0000))</span></span><br><span class="line">index(<span class="number">1</span>px solid red, solid);  <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><h4><span id="24颜色函数">2.4颜色函数</span></h4><p><strong>RGB函数：</strong></p><ul><li>rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；</li><li>rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；</li><li>red($color)：从一个颜色中获取其中红色值；</li><li>green($color)：从一个颜色中获取其中绿色值；</li><li>blue($color)：从一个颜色中获取其中蓝色值；</li><li>mix($color-1,$color-2,[$weight])：把两种颜色（按比例）混合在一起，默认比例是50%。</li></ul><p>在命令终端开启<code>sass -i</code>命令，相当于开启 Sass 的函数计算。</p><p><strong>HSL函数：</strong></p><ul><li>hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；</li><li>hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；</li><li>hue($color)：从一个颜色中获取色相（hue）值；</li><li>saturation($color)：从一个颜色中获取饱和度（saturation）值；</li><li>lightness($color)：从一个颜色中获取亮度（lightness）值；</li><li>adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色；</li><li>lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色；</li><li>darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色；</li><li>saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色</li><li>desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；</li><li>grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%);</li><li>complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);</li><li>invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。</li></ul><p><strong>Opacity函数：</strong> </p><ul><li>alpha($color) /opacity($color)：获取颜色透明度值；</li><li>rgba($color, $alpha)：改变颜色的透明度值；</li><li>opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明；</li><li>transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。</li></ul><h4><span id="25其他函数">2.5其他函数</span></h4><p><strong>Introspection 函数</strong><br>包括了几个判断型函数：</p><ul><li>type-of($value)：返回一个值的类型(number,string,bool,color)</li><li>unit($number)：返回一个值的单位</li><li>unitless($number)：判断一个值是否带有单位,不带单位返回true</li><li>comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并,可以返回true</li></ul><p><strong>Miscellaneous 函数</strong>（三元条件函数）<br><code>if($condition,$if-true,$if-false)</code>:当 $condition 条件成立时，返回的值为 $if-true，否则返回的是 $if-false 值<br>例如：<code>if(true,1px,2px);  //1px</code></p><p><strong>Map</strong><br>声明方式：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>: (<span class="regexp">//</span>可以嵌套</span><br><span class="line">    <span class="variable">$key1</span>: value1,</span><br><span class="line">    <span class="variable">$key2</span>: value2,</span><br><span class="line">    <span class="variable">$key3</span>: value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>实用性非常强，有些换皮肤的项目，可以使用此功能来管理颜色的变量，便于维护与管理。如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$theme-color:</span> <span class="string">(</span></span><br><span class="line"><span class="attr">    default:</span> <span class="string">(</span></span><br><span class="line"><span class="attr">        bgcolor:</span> <span class="comment">#fff,</span></span><br><span class="line"><span class="attr">        text-color:</span> <span class="comment">#444,</span></span><br><span class="line"><span class="attr">        link-color:</span> <span class="comment">#39f</span></span><br><span class="line">    <span class="string">),</span></span><br><span class="line"><span class="attr">    primary:</span><span class="string">(</span></span><br><span class="line"><span class="attr">        bgcolor:</span> <span class="comment">#000,</span></span><br><span class="line"><span class="attr">        text-color:</span><span class="comment">#fff,</span></span><br><span class="line"><span class="attr">        link-color:</span> <span class="comment">#93f</span></span><br><span class="line">    <span class="string">),</span></span><br><span class="line"><span class="attr">    negative:</span> <span class="string">(</span></span><br><span class="line"><span class="attr">        bgcolor:</span> <span class="comment">#f36,</span></span><br><span class="line"><span class="attr">        text-color:</span> <span class="comment">#fefefe,</span></span><br><span class="line"><span class="attr">        link-color:</span> <span class="comment">#d4e</span></span><br><span class="line">    <span class="string">)</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure></p><p><strong>Maps函数：</strong></p><ul><li>map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。如果 $key 不存在 $map中，将返回 null 值，不会报错。</li><li>map-merge($map1,$map2)：将两个 map 合并成一个新的 map。如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的</li><li>map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。</li><li>map-keys($map)：返回 map 中所有的 key。</li><li>map-values($map)：返回 map 中所有的 value。</li><li>map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。</li><li>keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//SCSS</span><br><span class="line">$social-colors: (</span><br><span class="line">    dribble: #ea4c89,</span><br><span class="line">    facebook: #<span class="number">3b5998</span>,</span><br><span class="line">    github: #<span class="number">171515</span>,</span><br><span class="line">    google: #db4437,</span><br><span class="line">    twitter: #55acee</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">.btn-dribble&#123;</span><br><span class="line">    <span class="built_in">color</span>: <span class="built_in">map</span>-<span class="built_in">get</span>($social-colors,facebook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//CSS</span><br><span class="line">.btn-dribble &#123;</span><br><span class="line">    <span class="built_in">color</span>: #<span class="number">3b5998</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3sass的规则">3.Sass的@规则</span></h3><p><strong>@import</strong>:所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。sass的@import规则在生成css文件时就把相关文件导入进来。与css的@import规则不一样：只有执行到@import时，浏览器才会去下载其他css文件，这导致页面加载起来特别慢。<br>在少数几种情况下，它会被编译成 CSS 的 @import 规则：</p><blockquote><p>如果文件的扩展名是 .css。<br>如果文件名以 http:// 开头。<br>如果文件名是 url()。<br>如果 @import 包含了任何媒体查询（media queries）。</p></blockquote><ul><li>如果没有扩展名， Sass 将试着找出具有 .scss 或 .sass 扩展名的同名文件并将其引入。</li><li>@import 引入多个文件：<code>@import &quot;rounded-corners&quot;, &quot;text-shadow&quot;;</code></li><li>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。在同一个目录不能同时存在带下划线和不带下划线的同名文件。</li></ul><p><strong>@media</strong>:如果在样式中使用 @media 指令，它将冒泡到外面。</p><p><strong>@at-root</strong>:当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用 @at-root。</p><p><strong>@debug</strong>:当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug。（@warn，@error用法类似）</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1sass的控制命令&quot;&gt;1.Sass的控制命令&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11if和else&quot;&gt;1.1@if和@else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12for&quot;&gt;1.2@for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13while&quot;&gt;1.3@while&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#14each&quot;&gt;1.4@each&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2sass的函数功能&quot;&gt;2.Sass的函数功能&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21字符串函数&quot;&gt;2.1字符串函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22数字函数&quot;&gt;2.2数字函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23列表函数&quot;&gt;2.3列表函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24颜色函数&quot;&gt;2.4颜色函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#25其他函数&quot;&gt;2.5其他函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3sass的规则&quot;&gt;3.Sass的@规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://wtlemoney.github.io/categories/CSS/"/>
    
      <category term="预处理器" scheme="https://wtlemoney.github.io/categories/CSS/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="SCSS" scheme="https://wtlemoney.github.io/categories/CSS/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/SCSS/"/>
    
    
      <category term="CSS" scheme="https://wtlemoney.github.io/tags/CSS/"/>
    
      <category term="SCSS" scheme="https://wtlemoney.github.io/tags/SCSS/"/>
    
      <category term="预处理器" scheme="https://wtlemoney.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="编译" scheme="https://wtlemoney.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="工具" scheme="https://wtlemoney.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="函数" scheme="https://wtlemoney.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>SCSS基础学习（一）</title>
    <link href="https://wtlemoney.github.io/2018/05/09/SCSS-1/"/>
    <id>https://wtlemoney.github.io/2018/05/09/SCSS-1/</id>
    <published>2018-05-09T15:48:45.000Z</published>
    <updated>2018-06-15T16:40:55.602Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1sass编译">1.Sass编译</a><ul><li><a href="#11命令编译">1.1命令编译</a></li><li><a href="#12gui编译和自动化编译">1.2GUI编译和自动化编译</a></li></ul></li><li><a href="#2sass调试">2.Sass调试</a></li><li><a href="#3sass基础">3.Sass基础</a><ul><li><a href="#31声明变量">3.1声明变量</a></li><li><a href="#32嵌套">3.2嵌套</a></li><li><a href="#33混合宏">3.3混合宏</a></li><li><a href="#34继承">3.4继承</a></li><li><a href="#35占位符">3.5占位符</a></li><li><a href="#36插值">3.6插值</a></li><li><a href="#37注释">3.7注释</a></li><li><a href="#38值列表">3.8值列表</a></li></ul></li><li><a href="#4sass运算">4.Sass运算</a><ul><li><a href="#41加减乘除">4.1加减乘除</a></li><li><a href="#42颜色运算">4.2颜色运算</a></li><li><a href="#43字符运算">4.3字符运算</a></li></ul></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1sass编译">1.Sass编译</span></h3><p><strong>三种编译方法</strong>：命令编译，GUI编译，自动化编译。<br>我会选择命令编译。</p><p><strong>Sass常见的编译错误</strong>：</p><ul><li>字符编译，需要将文件编码设置为”utf-8”</li><li>中文字符，不要在文件命名时使用中文</li></ul><p><strong>不同样式风格的输出方法</strong>：</p><ul><li>嵌套输出方式 nested</li><li>展开输出方式 expanded  </li><li>紧凑输出方式 compact </li><li>压缩输出方式 compressed</li></ul><p>比如压缩输出在终端输入：<br><code>sass --watch test.scss:test.css --style compressed</code><br>注意：压缩输出方式会去掉标准的 Sass 和 CSS 注释及空格</p><h4><span id="11命令编译">1.1命令编译</span></h4><p>单文件编译：<br>假设我本地有一个项目，我要把项目中“bootstrap.scss”编译出“bootstrap.css”文件，并且将编译出来的文件放在“css”文件夹中，我就可以在我的命令终端中执行：<br><code>sass --watch sass/bootstrap.scss:css/bootstrap.css</code></p><p>在编译 Sass 时，开启“watch”功能，这样只要你的代码进行任何修改，都能自动监测到代码的变化，并且给你直接编译出来</p><p>多文件编译：</p><p>sass sass/:css/<br>上面的命令表示将项目中“sass”文件夹中所有“.scss”(“.sass”)文件编译成“.css”文件，并且将这些 CSS 文件都放在项目中“css”文件夹中。</p><h4><span id="12gui编译和自动化编译">1.2GUI编译和自动化编译</span></h4><p>比较流行的GUI界面编译工具：</p><ul><li><a href="http://koala-app.com/" target="_blank" rel="noopener">Koala</a></li><li><a href="http://compass.kkbox.com/" target="_blank" rel="noopener">Compass.app</a></li><li><a href="http://mhs.github.io/scout-app/" target="_blank" rel="noopener">Scout</a></li><li><a href="https://incident57.com/codekit/index.html" target="_blank" rel="noopener">CodeKit</a></li><li><a href="https://prepros.io/" target="_blank" rel="noopener">Prepros</a></li></ul><p>自动化编译工具：Grunt和Gulp</p><p>如有需要，请自行了解。</p><h3><span id="2sass调试">2.Sass调试</span></h3><ul><li><p>浏览器支持 sourcemap 功能即可</p></li><li><p>早期版本编译时添加参数：–sourcemap<br><code>sass --watch --scss --sourcemap style.scss:style.css</code></p></li><li><p>Sass 3.3版本以后不需添加参数<br><code>sass --watch style.scss:style.css</code></p></li></ul><ul><li>终端输入命令，将看到一个信息<blockquote><p>Change detected to: style.scss<br>write style.css<br>write style.css.map</p></blockquote></li></ul><h3><span id="3sass基础">3.Sass基础</span></h3><h4><span id="31声明变量">3.1声明变量</span></h4><p>“$”；变量名称；赋予变量的值。例子：$width:300px;<br>sass 的默认变量仅需要在值后面加上 !default 即可。覆盖默认变量：在默认变量之前重新声明<br>声明变量的场合：</p><blockquote><p>这个值要用到至少两次<br>这个值至少会被更新一次<br>这个值所有的表现都和变量有关 （非巧合）</p></blockquote><h4><span id="32嵌套">3.2嵌套</span></h4><p>1)<em>选择器嵌套</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">header</span> &amp; &#123;  <span class="comment">//header &amp;表示header作为nav的父集</span></span><br><span class="line">      <span class="attribute">color</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出来的css</span></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)<em>属性嵌套</em><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sass</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">1px</span> solid red;</span><br><span class="line">   <span class="attribute">bottom</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)<em>伪类嵌套</em><br>伪类嵌套和属性嵌套非常类似，只不过他需要借助<code>&amp;</code>符号一起配合使用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">&amp;:before,</span><br><span class="line">&amp;:after &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line">&amp;:after &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译出来的css</span></span><br><span class="line">clearfix:before, <span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="33混合宏">3.3混合宏</span></h4><p>当网站中有颜色、字体等小样式类似时，可以使用变量处理。但样式复杂，需要重复使用大段的样式时，混合宏就很有意义了。混合宏的不足之处是会生成冗余的代码块，Sass 在调用相同的混合宏时，并不能智能的将相同的样式代码块合并在一起。。</p><ul><li><strong>声明混合宏</strong></li></ul><p>在 Sass 中，使用“@mixin”来声明一个混合宏。<br>1)<em>不带参数混合宏</em><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border-radius&#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2)<em>带参数混合宏</em><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带值的参数</span></span><br><span class="line">@<span class="keyword">mixin</span> border-radius(<span class="variable">$radius</span>:<span class="number">5px</span>)&#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> border-radius;  <span class="comment">//或者传值：include border-radius(50%);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带值的参数</span></span><br><span class="line">@<span class="keyword">mixin</span> border-radius(<span class="variable">$radius</span>)&#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不带值参数的调用</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> border-radius(<span class="number">3px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)<em>复杂的混合宏</em><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mixin</span> box-shadow($shadow...) &#123;</span><br><span class="line">  <span class="variable">@if</span> length($shadow) &gt;= <span class="number">1</span> &#123;</span><br><span class="line">    <span class="variable">@include</span> prefixer(box-shadow, $shadow);  <span class="comment">//调用@mixin声明的混合宏prefixer</span></span><br><span class="line">  &#125; <span class="variable">@else</span>&#123;</span><br><span class="line">    $<span class="attribute">shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="variable">@include</span> prefixer(box-shadow, $shadow);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>调用混合宏</strong></li></ul><p>在 Sass 中通过 @mixin 关键词声明了一个混合宏，那么在实际调用中，其匹配了一个关键词“@include”来调用声明好的混合宏。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">@<span class="keyword">mixin</span> border-radius&#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> border-radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译出来的CSS</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="34继承">3.4继承</span></h4><p>通过关键词 “@extend”来继承已存在的类样式块，从而实现代码的继承。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f36</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  @<span class="keyword">extend</span> .btn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译成CSS</span></span><br><span class="line"><span class="selector-class">.btn</span>, <span class="selector-class">.btn-primary</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f36</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="35占位符">3.5占位符</span></h4><p>%placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line">%mt5 &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> %mt5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="36插值">3.6插值</span></h4><p>比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。注意：使用 #{ }插值语句时，有引号字符串将被编译为无引号字符串</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SCSS</span></span><br><span class="line"><span class="variable">$properties</span>: (margin, padding);</span><br><span class="line">@<span class="keyword">mixin</span> set-value(<span class="variable">$side</span>, <span class="variable">$value</span>) &#123;</span><br><span class="line">    @<span class="keyword">each</span> <span class="variable">$prop</span> in <span class="variable">$properties</span> &#123;</span><br><span class="line">        #&#123;<span class="variable">$prop</span>&#125;-#&#123;<span class="variable">$side</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-box</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> set-value(top, 14px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.login-box</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/SCSS-1/scss.jpg" alt=""></p><h4><span id="37注释">3.7注释</span></h4><p>1）类似 CSS 的注释方式，使用 ”/<em> ”开头，结属使用 ”</em>/ ”<br>2）类似 JavaScript 的注释方式，使用“//”<br>区别：前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示</p><h4><span id="38值列表">3.8值列表</span></h4><p>1）值列表中可以再包含值列表，比如 1px 2px, 5px 6px 是包含 1px 2px 与 5px 6px 两个值列表的值列表。如果内外两层值列表使用相同的分隔方式，要用圆括号包裹内层，所以也可以写成 (1px 2px) (5px 6px)。<br>2）如果值列表中包含空的值列表或空值，编译时将清除空值，比如 1px 2px () 3px 或 1px 2px null 3px。<br>3）列表函数</p><blockquote><p>nth函数（nth function） 可以直接访问值列表中的某一项；<br>join函数（join function） 可以将多个值列表连结在一起；<br>append函数（append function） 可以在值列表中添加值；<br>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。</p></blockquote><h3><span id="4sass运算">4.Sass运算</span></h3><h4><span id="41加减乘除">4.1加减乘除</span></h4><p>运算时碰到不同类型的单位时，编译会报错。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span> + <span class="number">8in</span>; <span class="comment">//788px,1英寸==96px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">100px</span> / <span class="number">2</span>);  <span class="comment">//要有括号，否则会编译成100px/2</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span> / <span class="number">2</span> + <span class="number">2in</span>;  <span class="comment">//242px,“/”符号在已有的数学表达式中时，也会被认作除法符号</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span> / <span class="number">10</span>; <span class="comment">//可以没有括号</span></span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">1000px</span> / <span class="number">100px</span>); <span class="comment">//10,不带单位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>”/  ”符号被当作除法运算符时有以下几种情况：</p><p>•    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。<br>•    如果数值被圆括号包围。<br>•    如果数值是另一个数学表达式的一部分。</p><h4><span id="42颜色运算">4.2颜色运算</span></h4><p>所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;<span class="comment">//#050709</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="43字符运算">4.3字符运算</span></h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">"Hello"</span> + <span class="string">""</span> + <span class="string">"Sass!"</span>;</span><br><span class="line"><span class="selector-class">.box</span>:before &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" #&#123;$content&#125; "</span>;  <span class="comment">//content: " Hello Sass! ";</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">  <span class="attribute">cursor</span>: e + -resize;  <span class="comment">//cursor: e-resize;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果有引号的字符串被添加了一个没有引号的字符串， 结果会是一个有引号的字符串。同样的，如果一个没有引号的字符串被添加了一个有引号的字符串，结果将是一个没有引号的字符串。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1sass编译&quot;&gt;1.Sass编译&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11命令编译&quot;&gt;1.1命令编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12gui编译和自动化编译&quot;&gt;1.2GUI编译和自动化编译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2sass调试&quot;&gt;2.Sass调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3sass基础&quot;&gt;3.Sass基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31声明变量&quot;&gt;3.1声明变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32嵌套&quot;&gt;3.2嵌套&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33混合宏&quot;&gt;3.3混合宏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34继承&quot;&gt;3.4继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#35占位符&quot;&gt;3.5占位符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#36插值&quot;&gt;3.6插值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#37注释&quot;&gt;3.7注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#38值列表&quot;&gt;3.8值列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4sass运算&quot;&gt;4.Sass运算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#41加减乘除&quot;&gt;4.1加减乘除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#42颜色运算&quot;&gt;4.2颜色运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#43字符运算&quot;&gt;4.3字符运算&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://wtlemoney.github.io/categories/CSS/"/>
    
      <category term="预处理器" scheme="https://wtlemoney.github.io/categories/CSS/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="SCSS" scheme="https://wtlemoney.github.io/categories/CSS/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/SCSS/"/>
    
    
      <category term="CSS" scheme="https://wtlemoney.github.io/tags/CSS/"/>
    
      <category term="SCSS" scheme="https://wtlemoney.github.io/tags/SCSS/"/>
    
      <category term="预处理器" scheme="https://wtlemoney.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="编译" scheme="https://wtlemoney.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="工具" scheme="https://wtlemoney.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTML5指南（一）</title>
    <link href="https://wtlemoney.github.io/2018/05/06/HTML5-1/"/>
    <id>https://wtlemoney.github.io/2018/05/06/HTML5-1/</id>
    <published>2018-05-06T12:35:56.000Z</published>
    <updated>2018-06-14T15:57:51.694Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1html5的目标和解决的问题">1.HTML5的目标和解决的问题</a></li><li><a href="#2html5主要的新特性">2.HTML5主要的新特性</a></li><li><a href="#3html5和html4的区别">3.HTML5和HTML4的区别</a><ul><li><a href="#31新增的元素和废弃的元素">3.1新增的元素和废弃的元素</a></li><li><a href="#32新增的属性和废弃的属性">3.2新增的属性和废弃的属性</a></li><li><a href="#33全局属性">3.3全局属性</a></li><li><a href="#34新增的事件">3.4新增的事件</a></li></ul></li></ul><!-- tocstop --><h3><span id="1html5的目标和解决的问题">1.HTML5的目标和解决的问题</span></h3><p><strong>目标：</strong>能够创建更简单的Web程序，书写出更简洁的HTML代码。</p><p><strong>解决的问题：</strong></p><ul><li>Web浏览器之间的兼容性很低。</li><li>文档结构不够明确。</li><li>Web应用程序的功能受到了限制。<a id="more"></a></li></ul><h3><span id="2html5主要的新特性">2.HTML5主要的新特性</span></h3><p><strong>语义特性：</strong>HTML5赋予网页更好的意义和结构。简单来说就是程序猿更方便跟浏览器沟通。</p><p><strong>本地存储特性：</strong>基于HTML5开发的网页APP拥有更短的启动时间，更快的联网速度，因为可以将一些常用、不常更新的内容存储在本地。</p><p><strong>设备兼容特性：</strong>HTML5提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连，例如视频影音可直接与microphones及摄像头相联。</p><p><strong>连接特性：</strong>HTML5拥有更有效的服务器推送技术，Server-SentEvent和WebSockets就是其中的两个特性，这两个特性能够帮助实现服务器将数据“推送”到客户端的功能。更有效的连接工作效率，可以实现基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流。</p><p><strong>网页多媒体特性：</strong>支持网页端的Audio、Video等多媒体功能。</p><p><strong>三维、图形及特效特性：</strong>基于SVG、Canvas、WebGL及CSS3的3D功能，视觉效果将大大增强，在线3D网游就是最典型的例子。</p><p><strong>性能与集成特性：</strong>HTML5会通过XMLHttpRequest2等技术，帮助Web应用和网站在多样化的环境中更快速的工作。最直观的就是加载会更快。</p><p><strong>CSS3特性：</strong>相对于旧的CSS版本，HTML5所支持的CSS3中提供了更多的风格和更强的效果，也提供了更高的灵活性和控制性。</p><h3><span id="3html5和html4的区别">3.HTML5和HTML4的区别</span></h3><h4><span id="31新增的元素和废弃的元素">3.1新增的元素和废弃的元素</span></h4><ul><li><p><strong>新增的结构元素：</strong>section、article、aside、header、footer、nav、figure、main<br>figure元素表示一段独立的流内容，一般表示文档主体流内容中的一个独立单元。</p></li><li><p><strong>新增的其他元素：</strong>video、audio、embed、mark、progress、meter、time、canvas、command、datalist、datagrid、kengen、output、source、menu、dialog<br>kengen元素表示生产秘钥。<br>meter元素表示度量衡，仅用于已知最大值和最小值的度量。</p></li><li><p><strong>新增的input元素的类型：</strong>email、url、number、range、Date Pickers(date,month,week,time,datetime,datetime-local)</p></li><li><p><strong>被废除的元素：</strong></p><ul><li>能使用CSS替代的元素：basefont、big、center、font、s、strike、tt、u</li><li>不再使用frame框架：frameset、frame、noframes。由于frame框架对网页可用性存在负面影响，在HTML5中只支持iframe框架</li><li>只有部分浏览器支持的元素：applet、bgsound、blink、marquee</li><li>其他被废弃的元素：rb、acronym、dir、isindex、listing、xmp、nextid、plaintext</li></ul></li></ul><h4><span id="32新增的属性和废弃的属性">3.2新增的属性和废弃的属性</span></h4><ul><li><p><strong>新增表单相关的属性</strong></p><ul><li>autofocus  (元素input[type=”tetx”],select,textarea,button)</li><li>placeholder（元素inout[type=”tetx”],textarea）</li><li>form() （元素input,output,select,textarea,button,fieldset）</li><li>required （元素inout[type=”tetx”],textarea）</li><li>autocomplete,min,max,multiple,pattern,step<br>新的list元素与datalist元素配合使用。datalist元素与autocomplete属性配合使用。<br>multiple属性允许在上传文件时一次上传多个文件。</li><li>formaction、formenctype、formmethod、formnovalidate、formtarget (元素input,button)<br>为fieldset元素增加了disabled属性。</li><li>novalidate (元素input,button,form)</li><li>labels,属性值为一个NodeList对象</li><li>可以在标签（lable元素）内部放置一个表单元素，并且通过该标签的control属性访问该表单元素。</li><li>SelectionDirection (元素input,textarea)</li><li>indeterminate (元素checkbox)</li><li>对类型为image的input元素添加width和height属性指定图片按钮宽高</li><li>maxlength和wrap(元素textarea)</li></ul></li><li><p><strong>链接相关的属性</strong></p><ul><li>media,download,ping （元素a和area）</li><li>hreflang,rel （元素area）</li><li>sizes  (元素link)</li><li>target (元素base)</li></ul></li><li><p><strong>其他新增属性</strong></p><ul><li>start，reversed (元素ol)</li><li>charset (元素meta)</li><li>type，label（元素menu）</li><li>scoped （元素style）</li><li>async （元素script）</li><li>manifest （元素html）</li><li>sandbox,seamless,srcdoc（元素iframe）</li></ul></li><li><p><strong>废弃的元素</strong>（只列举部分HTML4常见的）</p><ul><li>charset (元素link,a)</li><li>target (元素link)</li><li>align (元素caption,input,div,h1-h6,p)</li><li>background，bgcolor （元素body）</li><li>align,bgcolor,border,cellpadding,cellspacing,frame,rules,width (元素table)</li><li>等等</li></ul></li></ul><h4><span id="33全局属性">3.3全局属性</span></h4><ul><li><strong>contentEditable：</strong>为true时，该元素变成可编辑的了</li><li><strong>designMode：</strong>on或off，指定整个页面是否可编辑</li><li><strong>hidden</strong></li><li><strong>spellcheck：</strong>true或false，不可缺省。 (针对元素input[input=text],textarea),功能是对用户输入的文本内容进行拼写和语法检查</li><li><strong>tableindex：</strong>设为负数，通常为-1，按下TAB键该元素就不能获得焦点。</li></ul><h4><span id="34新增的事件">3.4新增的事件</span></h4><ul><li><strong>window对象body元素：</strong>beforeprint,afterprint,resize,error,offline,online,pageshow,beforeunload,hashchange</li><li><strong>任何元素：</strong>mousewheel(当用户鼠标指针悬停在元素上并滚动鼠标时触发)</li><li><strong>任何容器元素：</strong>scoll</li><li><strong>input和textarea元素</strong>：input<br><code>&lt;input type=text oninput=&quot;alert(&quot;元素内容被修改&quot;)&quot;&gt;</code><br>当用户修改文本框内容时触发input事件，input事件和change事件的区别是input事件在元素尚未失去焦点时已触发，change事件只在元素失去焦点时触发</li><li><strong>form元素：</strong>reset</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1html5的目标和解决的问题&quot;&gt;1.HTML5的目标和解决的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2html5主要的新特性&quot;&gt;2.HTML5主要的新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3html5和html4的区别&quot;&gt;3.HTML5和HTML4的区别&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31新增的元素和废弃的元素&quot;&gt;3.1新增的元素和废弃的元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32新增的属性和废弃的属性&quot;&gt;3.2新增的属性和废弃的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33全局属性&quot;&gt;3.3全局属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34新增的事件&quot;&gt;3.4新增的事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h3 id=&quot;1-HTML5的目标和解决的问题&quot;&gt;&lt;a href=&quot;#1-HTML5的目标和解决的问题&quot; class=&quot;headerlink&quot; title=&quot;1.HTML5的目标和解决的问题&quot;&gt;&lt;/a&gt;1.HTML5的目标和解决的问题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;目标：&lt;/strong&gt;能够创建更简单的Web程序，书写出更简洁的HTML代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web浏览器之间的兼容性很低。&lt;/li&gt;
&lt;li&gt;文档结构不够明确。&lt;/li&gt;
&lt;li&gt;Web应用程序的功能受到了限制。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://wtlemoney.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="https://wtlemoney.github.io/tags/HTML5/"/>
    
      <category term="HTML4" scheme="https://wtlemoney.github.io/tags/HTML4/"/>
    
      <category term="表单" scheme="https://wtlemoney.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="事件" scheme="https://wtlemoney.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Canvas常用API总结</title>
    <link href="https://wtlemoney.github.io/2018/05/02/Canvas%E5%B8%B8%E7%94%A8API/"/>
    <id>https://wtlemoney.github.io/2018/05/02/Canvas常用API/</id>
    <published>2018-05-02T14:50:56.000Z</published>
    <updated>2018-06-15T16:43:48.840Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1绘制线条">1.绘制线条</a></li><li><a href="#2线条样式">2.线条样式</a></li><li><a href="#3绘制曲线">3.绘制曲线</a></li><li><a href="#4绘制矩形及填充">4.绘制矩形及填充</a></li><li><a href="#5绘制阴影">5.绘制阴影</a></li><li><a href="#6绘制渐变">6.绘制渐变</a></li><li><a href="#7填充背景">7.填充背景</a></li><li><a href="#8变换">8.变换</a></li><li><a href="#9其他相关api">9.其他相关API</a></li></ul><!-- tocstop --><a id="more"></a><p>绘画的时候canvas相当于画布，而context相当于画笔。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"drawing"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;Your browser doesn<span class="string">'t support the canvas tag.&lt;/canvas&gt;</span></span><br><span class="line"><span class="string">//js</span></span><br><span class="line"><span class="string">var draw=document.getElementById("drawing");</span></span><br><span class="line"><span class="string">var context=draw.getContext("2d");</span></span><br></pre></td></tr></table></figure></p><h4><span id="1绘制线条">1.绘制线条</span></h4><ul><li><p>moveTo(x0,y0)：把当前画笔（draw）移动到（x0,y0）这个位置。</p></li><li><p>lineTo(x1,y1):从当前位置(x0,y0)处到（x1，y1）画一条直线。</p></li><li><p>beginPath()：开启一条路径或者重置当前路径。</p></li><li><p>closePath():从当前点回到路径起始点，也就是上一个beginPath的位置。</p></li><li><p>stroke():绘制。必须加了这个函数才会画图，所以这个一定要放在最后。</p></li></ul><p>注意：closePath()放在stroke函数后面，则不会绘制成一个闭合的线条，因为在闭合前，已经绘制了。beginPath()和closePath()可以不成对出现，closePath()是用来闭合终点和起始点画一条闭合路径的。</p><h4><span id="2线条样式">2.线条样式</span></h4><ul><li><p>lineCap：线条端点样式（butt，round，square）-(平头，圆头，方头)。</p></li><li><p>lineJoin：两线条相交时的拐点样式（round，bevel，mitr）-(圆交，斜交，斜接)。其中设置为miter时还可以通过miterLimet设置拐点交界处的最大长度。</p></li><li><p>lineWidth：线条宽度</p></li><li><p>strokeStyle： 线条颜色、渐变(定义好的渐变对象)、模式。 context.strokeStyle=”#333”;</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.strokeStyle=<span class="string">"#0000ff"</span>;</span><br><span class="line">context.lineWidth=<span class="number">20</span>;</span><br><span class="line">context.lineCap=<span class="string">"round"</span>;</span><br><span class="line">context.moveTo(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">context.lineTo(<span class="number">80</span>,<span class="number">80</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><h4><span id="3绘制曲线">3.绘制曲线</span></h4><ul><li>arc(x,y,radius,startAngle,endAngle,anticlockwise):绘制曲线。radius是曲线半径，startAngle,endAngle开始角度和结束角度，用的是弧度(Math.PI/180)*角度值，anticlockwise绘制方向（false为顺时针）；</li></ul><h4><span id="4绘制矩形及填充">4.绘制矩形及填充</span></h4><ul><li><p>rect():创建矩形；</p></li><li><p>fillStyle:设置填充颜色，<code>context.fillStyle=&quot;#0000ff&quot;;</code></p></li><li><p>fillRect(x,y,width,height):绘制被填充的矩形，(x,y)起始点，width，height为矩形宽高</p></li><li><p>strokeRect()：绘制矩形线框</p></li><li><p>clearRect():清除掉矩形。</p></li></ul><h4><span id="5绘制阴影">5.绘制阴影</span></h4><ul><li><p>shadowColor：阴影颜色</p></li><li><p>shadowBlur:模糊级别</p></li><li><p>shadowOffsetX：阴影的水平距离</p></li><li><p>shadowOffsetY：阴影的垂直距离</p></li></ul><p>注意：要先设置阴影再画矩形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.shadowBlur=<span class="number">20</span>;</span><br><span class="line">context.shadowColor=<span class="string">"#456"</span>;</span><br><span class="line">context.shadowOffsetX=<span class="number">-10</span>;</span><br><span class="line">context.shadowOffsetY=<span class="number">30</span>;<span class="comment">//先设置阴影再画矩形</span></span><br><span class="line">context.fillStyle=<span class="string">"#108997"</span>;</span><br><span class="line">context.fillRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">80</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p><img src="/2018/05/02/Canvas常用API/shadow.png" alt="img"></p><h4><span id="6绘制渐变">6.绘制渐变</span></h4><ul><li><p>createLinearGradient(x1,y1,x2,y2):绘制线性渐变，(x1,y1)是渐变的起始点，（x2,y2）是渐变的终点，位置不同可以制作出垂直或者水平渐变。</p></li><li><p>createRadialGradient(x1,y1,r1,x2,y2,r2)：径向渐变，(x1,y1)是渐变的起始点圆心，r1是半径，（x2,y2）是渐变的终点，r2是结束点半径;</p></li><li><p>addColorStop(stop,color)来设置渐变过程，stop是0.0到1.0的值。（两种渐变都需要使用）</p></li></ul><h4><span id="7填充背景">7.填充背景</span></h4><ul><li>createPattern(image,”repeat|repeat-x|repeat-y|no-repeat”):image是一个图片对象，后面的参数是用来设定图片的重复方式。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.images[<span class="number">0</span>],</span><br><span class="line"><span class="keyword">var</span> pattern = context.createPattern(image, <span class="string">"repeat"</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle = pattern;</span><br><span class="line">context.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><h4><span id="8变换">8.变换</span></h4><ul><li><p>rotate(angle):围绕原点旋转图像angle弧度</p></li><li><p>scale(scaleX,scaleY):缩放</p></li><li><p>translate(x,y）:将坐标原点移动到(x,y)</p></li></ul><h4><span id="9其他相关api">9.其他相关API</span></h4><ul><li><p>fill():填充当前路径。</p></li><li><p>clip():从画布中剪裁任意形状和尺寸的画布，之后所有的绘图都会被限制在剪裁的区域内。</p></li><li><p>isPointInPath():<code>context.isPointInPath(x,y)</code>判断这个点是否位于当前路径</p></li><li><p>清除画布方法：获取画布的宽高，<code>draw.height,draw.width</code>，然后使用clearRect();</p></li><li><p>修改画布的宽高：<code>draw.width=&#39;200&#39;，draw.width=&#39;300&#39;</code></p></li><li><p>globalAlpha:设置透明度，只能是0~1的数字，如果透明度不一样，在画第二幅之前重新设置即可。</p></li><li><p>toDataURL:<code>draw.toDataURL(type,encoderOptions)</code>，这个函数返回一个image的base64的URI，参数都是可选的，type可以设置图片类型如image/jpeg,image/webp，默认是image/png；encoderOptions是一个0~1的数字，用来设置image/jpeg,image/webp的图片质量，其他格式的type设置这个参数无效。</p></li><li><p>想操作外部的画布，使用save()函数保存。想要回到之前保存的设置，再使用restore()函数恢复，中间做的操作不会消失。可连续调用restore()，实现一级一级返回。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1绘制线条&quot;&gt;1.绘制线条&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2线条样式&quot;&gt;2.线条样式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3绘制曲线&quot;&gt;3.绘制曲线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4绘制矩形及填充&quot;&gt;4.绘制矩形及填充&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5绘制阴影&quot;&gt;5.绘制阴影&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6绘制渐变&quot;&gt;6.绘制渐变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7填充背景&quot;&gt;7.填充背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8变换&quot;&gt;8.变换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9其他相关api&quot;&gt;9.其他相关API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://wtlemoney.github.io/categories/HTML5/"/>
    
      <category term="Canvas" scheme="https://wtlemoney.github.io/categories/HTML5/Canvas/"/>
    
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="Canvas" scheme="https://wtlemoney.github.io/tags/Canvas/"/>
    
      <category term="前端画图" scheme="https://wtlemoney.github.io/tags/%E5%89%8D%E7%AB%AF%E7%94%BB%E5%9B%BE/"/>
    
      <category term="API" scheme="https://wtlemoney.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件</title>
    <link href="https://wtlemoney.github.io/2018/04/24/DOM%E4%BA%8B%E4%BB%B6/"/>
    <id>https://wtlemoney.github.io/2018/04/24/DOM事件/</id>
    <published>2018-04-24T05:24:27.158Z</published>
    <updated>2018-06-14T15:54:33.743Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1事件流">1.事件流</a></li><li><a href="#2事件处理程序">2.事件处理程序</a><ul><li><a href="#21-html事件处理程序">2.1 HTML事件处理程序</a></li><li><a href="#22-dom0级事件处理程序">2.2 DOM0级事件处理程序</a></li><li><a href="#23-dom2级事件处理程序">2.3 DOM2级事件处理程序</a></li><li><a href="#24-ie事件处理程序">2.4 IE事件处理程序</a></li><li><a href="#25-跨浏览器的事件处理程序">2.5 跨浏览器的事件处理程序</a></li></ul></li><li><a href="#3事件对象">3.事件对象</a><ul><li><a href="#31-dom中的事件对象">3.1 DOM中的事件对象</a></li><li><a href="#32-ie中的事件对象">3.2 IE中的事件对象</a></li><li><a href="#33-跨浏览器的事件对象">3.3 跨浏览器的事件对象</a></li></ul></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1事件流">1.事件流</span></h3><ul><li>描述：从页面中接收事件的顺序。</li><li>方式：<ul><li>事件冒泡（IE事件流）</li><li>事件捕获（Netscape）</li><li>DOM事件流：事件捕获阶段、处于目标阶段、事件冒泡阶段</li></ul></li></ul><h3><span id="2事件处理程序">2.事件处理程序</span></h3><h4><span id="21-html事件处理程序">2.1 HTML事件处理程序</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"Click me"</span> onclick=<span class="string">"showMessage()"</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"Click me"</span> onclick=<span class="string">"alert(event.type)"</span>/&gt;<span class="comment">//输出:"click"</span></span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"Click me"</span> onclick=<span class="string">"alert(this.value)"</span>/&gt;<span class="comment">//输出:"Click me",this.value也可以写成value</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//无需引用表单元素就能访问其他表单字段</span></span><br><span class="line">&lt;form method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"hhh"</span> onclick=<span class="string">"alert(username.value)"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;缺点：时差问题，用户可能会在HTML元素一出现就触发了事件，这时候事件尚不具备执行条件。HTML和Js代码紧密耦合，不方便更改代码。</p><h4><span id="22-dom0级事件处理程序">2.2 DOM0级事件处理程序</span></h4><p>我不喜欢多打字，直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.id);  <span class="comment">//"myBtn"</span></span><br><span class="line"></span><br><span class="line">btn.onclick=<span class="literal">null</span>;<span class="comment">//删除事件处理程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="23-dom2级事件处理程序">2.3 DOM2级事件处理程序</span></h4><p>两个方法：<code>addEventListener()</code>和<code>removeEventListener()</code><br>参数：要处理的事件名，作为事件处理程序的函数，一个布尔值（true:捕获，false:冒泡）<br>好处：可以添加多个事件程序，按顺序触发<br>注意：移除时，传入的参数与添加函数处理程序使用的参数相同，匿名函数无法移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"> <span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.id);</span><br><span class="line"> &#125;</span><br><span class="line"> btn.addEventListener(<span class="string">"click"</span>,handler,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"> btn.removeEventListener(<span class="string">"click"</span>,handler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4><span id="24-ie事件处理程序">2.4 IE事件处理程序</span></h4><p>两个方法：<code>attachEvent()</code>和<code>detachEvent()</code>，（只有冒泡）<br>参数：要处理的事件名，作为事件处理程序的函数（作用域：全局，this指向全局）<br>注意：第一个参数如<code>onclick</code>,非DOM的<code>click</code>。<br>好处：也可以添加多个事件处理程序，但是是<code>以添加的相反的顺序触发</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"> <span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"haha"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> btn.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>==<span class="built_in">window</span>);<span class="comment">//true</span></span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//删除</span></span><br><span class="line"> btn.attachEvent(<span class="string">"onclick"</span>,handler);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"> btn.detachEvent(<span class="string">"onclick"</span>,handler);</span><br></pre></td></tr></table></figure><h4><span id="25-跨浏览器的事件处理程序">2.5 跨浏览器的事件处理程序</span></h4><p>EventUtil对象：处理浏览器间的差异<br>方法：<code>addHandler()</code>和<code>removeHandler()</code><br>参数：要操作的元素、事件名称、事件处理程序函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil=&#123;</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener)&#123;</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener)&#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent)&#123;</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(btn,<span class="string">"click"</span>,handler);</span><br><span class="line"></span><br><span class="line">EventUtil.removeHandler(btn,<span class="string">"click"</span>,handler);</span><br></pre></td></tr></table></figure></p><h3><span id="3事件对象">3.事件对象</span></h3><h4><span id="31-dom中的事件对象">3.1 DOM中的事件对象</span></h4><p>event对象属性/方法：<code>type,target,eventPhase,preventDefault(),stopPropagation(),....</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//event对象</span></span><br><span class="line"> <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"> btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     alert(event.type);<span class="comment">//"click"</span></span><br><span class="line"> &#125;</span><br><span class="line"> btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     alert(event.type);<span class="comment">//"click"</span></span><br><span class="line"> &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><h4><span id="32-ie中的事件对象">3.2 IE中的事件对象</span></h4><p>注意：DOM0级方法添加事件时，要<code>event=window.event</code><br>方法：</p><ul><li><code>cancelBubble</code>:默认为false，true为取消事件冒泡</li><li><code>returnValue</code>:默认为true，false为取消默认行为</li><li><code>srcElement</code>:事件的目标</li><li><code>type</code>:被触发的事件类型</li><li>作用域：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//DOM0级，故window.event</span></span><br><span class="line">    alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>);      <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(event.srcElement === <span class="keyword">this</span>);             <span class="comment">//false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4><span id="33-跨浏览器的事件对象">3.3 跨浏览器的事件对象</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Eventil=&#123;</span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;,</span><br><span class="line">    getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.preventDefault)&#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.stopPropagation)&#123;</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如取消冒泡：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Clicked"</span>);</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    EventUtil.stopPropagation(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Body clicked"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1事件流&quot;&gt;1.事件流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2事件处理程序&quot;&gt;2.事件处理程序&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-html事件处理程序&quot;&gt;2.1 HTML事件处理程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-dom0级事件处理程序&quot;&gt;2.2 DOM0级事件处理程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-dom2级事件处理程序&quot;&gt;2.3 DOM2级事件处理程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-ie事件处理程序&quot;&gt;2.4 IE事件处理程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#25-跨浏览器的事件处理程序&quot;&gt;2.5 跨浏览器的事件处理程序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3事件对象&quot;&gt;3.事件对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-dom中的事件对象&quot;&gt;3.1 DOM中的事件对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-ie中的事件对象&quot;&gt;3.2 IE中的事件对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-跨浏览器的事件对象&quot;&gt;3.3 跨浏览器的事件对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="DOM" scheme="https://wtlemoney.github.io/categories/DOM/"/>
    
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="节点操作" scheme="https://wtlemoney.github.io/tags/%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
    
      <category term="浏览器兼容" scheme="https://wtlemoney.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="DOM操作" scheme="https://wtlemoney.github.io/tags/DOM%E6%93%8D%E4%BD%9C/"/>
    
      <category term="DOM选择器" scheme="https://wtlemoney.github.io/tags/DOM%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="事件处理" scheme="https://wtlemoney.github.io/tags/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>DOM基础知识梳理</title>
    <link href="https://wtlemoney.github.io/2018/04/22/DOM%E5%9F%BA%E7%A1%80/"/>
    <id>https://wtlemoney.github.io/2018/04/22/DOM基础/</id>
    <published>2018-04-22T04:27:39.000Z</published>
    <updated>2018-06-14T15:53:51.933Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近自己写项目的时候，DOM操作稍多，但是发现自己不是很熟悉，以前看过的知识不常用就忘了，用的时候也是要经常去官网或网上查找。所以想把DOM的知识点重新回顾一下，以下知识点来自“JavaScript高级程序设计”第10、11、12章节。另外，想自己练习DOM操作相关的题，推荐<a href="http://ife.baidu.com/college/detail/id/10" target="_blank" rel="noopener">百度前端技术学院</a>的斌斌学院，上面有很多可操作的题，看的再多不如自己多思考多敲代码，这点我深有体会，可是吃了大亏的啊。</p><!-- toc --><ul><li><a href="#1dom1">1.DOM1</a><ul><li><a href="#11node类型">1.1Node类型</a></li><li><a href="#12document类型">1.2Document类型</a></li><li><a href="#13element类型">1.3Element类型</a></li><li><a href="#14text类型">1.4Text类型</a></li></ul></li><li><a href="#2dom扩展">2.DOM扩展</a></li><li><a href="#3dom2和dom3">3.DOM2和DOM3</a></li></ul><!-- tocstop --><a id="more"></a><h3><span id="1dom1">1.DOM1</span></h3><p>1998年10月DOM1级规范成为W3C的推荐标准。</p><h4><span id="11node类型">1.1Node类型</span></h4><ul><li>除了IE，浏览器都可以访问这个类型</li><li>JS中的所有节点类型都继承自Node类型，所有的节点类型都共享着相同的基本属性和方法</li><li>someNode.nodeName保存标签名，someNode.nodeValue===null</li><li>每个节点都有一个nodeType属性，表示节点的类型（共12个数值常量）<br>&emsp;列举3个常用的节点类型数值常量：<br>&emsp;&emsp;&emsp;Node.ELEMENT_NODE(1)<br>&emsp;&emsp;&emsp;Node.ATTRIBUTE_NODE(2)<br>&emsp;&emsp;&emsp;Node.TEXT_NODE(3)<br>&emsp;用法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(someNode.nodeType == Node.ELEMENT_NODE)&#123;<span class="comment">//在IE中无效</span></span><br><span class="line">    alert(<span class="string">"Node is a an element."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(someNode.nodeType == <span class="number">1</span>)&#123;<span class="comment">//适用于所有浏览器</span></span><br><span class="line">    alert(<span class="string">"Node is a an element."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问子节点：方括号和item()都可以</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> secondChild = someNode.childNodes.item(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>通过<code>previousSibling</code>和<code>nextSibling</code>访问相邻的兄弟节点 </li><li>插入节点：<code>appendChild(node)</code>和<code>insertBefore(node，参照节点)</code></li><li>替换节点：<code>replaceChild(node，要替换的节点)</code></li><li>移除节点：<code>removeChild(node)</code></li></ul><h4><span id="12document类型">1.2Document类型</span></h4><ul><li>documentElement属性、childNodes[0]、firstChild都指向<code>&lt;html&gt;</code>元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;<span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line">alert(html ===<span class="built_in">document</span>.childNodes[<span class="number">0</span>]);<span class="comment">//true</span></span><br><span class="line">alert(html === <span class="built_in">document</span>.firstChild);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>body属性指向<code>&lt;body&gt;</code>元素</li><li>查找元素：<code>getElementById()</code>和<code>getElementsByTagName()</code><br>&emsp;如果页面中多个元素的ID值相同，<code>getElementById()</code>只返回第一次出现的元素</li><li>对<code>&lt;img src=&quot;..&quot; name=&quot;myImage&quot;&gt;</code>取得<img>元素，可以有几种方法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">var</span> myImage = images.namedItem(<span class="string">"myImage"</span>);<span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">var</span> myImage = images[<span class="string">"myImage"</span>];<span class="comment">//方法2</span></span><br></pre></td></tr></table></figure><ul><li><code>getElementsByName</code>返回指定name特性的所有元素，常被使用情况：单选按钮</li><li><strong>特殊集合</strong><br>&emsp;document.anchors：包含文档中所有带name特性的<code>&lt;a&gt;</code>元素<br>&emsp;document.forms：所有<code>&lt;form&gt;</code>元素<br>&emsp;document.images：所有<code>&lt;img&gt;</code>元素<br>&emsp;document.links：所有带href特性的<code>&lt;a&gt;</code>元素</li><li><strong>文档写入</strong>：write()、writeln()、open()、close()<br>&emsp;write()会原样写入，writeln()会在字符串末尾添加一个换行符<br>&emsp;如果在文档结束后再调用document.write()，那么输出的内容将会重写整个页面</li><li><strong>DOM一致性检测</strong><br>&emsp;<code>var hasXmlDom=document.implementation.hasFeature(&quot;XML&quot;,&quot;1.0&quot;)</code>如果浏览器支持给定名称和版本的功能，返回true。</li></ul><h4><span id="13element类型">1.3Element类型</span></h4><ul><li><strong> 操作特性</strong>：getAttribute()、setAttribute()、removeAttribute()<br>&emsp;特性的名称不区分大小写，即“ID”和“id”代表同一特性<br>&emsp;根据HTML5规范，自定义特性应该加上data-前缀以便验证</li><li><strong>attributes属性</strong><br>取得元素的id属性，可以使用以下代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得元素的id属性</span></span><br><span class="line"><span class="keyword">var</span> id=element.attributes.getNamedItem(<span class="string">"id"</span>).nodeValue;<span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">var</span> id=element.attributes[<span class="string">"id"</span>].nodeValue;<span class="comment">//方法2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置id特性的值</span></span><br><span class="line">element.attributes[<span class="string">"id"</span>].nodeValue = <span class="string">"someOtherId"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除id特性,removeNamedItem()返回被删除特性的Attr节点，removeAttribute()彻底删除元素的特性</span></span><br><span class="line"><span class="keyword">var</span> oldAttr=element.attributes.removeNamedItem(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>创建元素</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.id=<span class="string">"myNewDiv"</span>;</span><br><span class="line">div.className=<span class="string">"box"</span>;<span class="comment">//class为保留字，所以使用className</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);<span class="comment">//新创建的元素添加到文档</span></span><br></pre></td></tr></table></figure><ul><li><strong>元素的子节点</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"myList"</span>&gt;</span><br><span class="line">    &lt;li&gt;Item <span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;Item 2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;Item <span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"><span class="comment">//IE来解析，&lt;ul&gt;会有3个子节点&lt;li&gt;元素</span></span><br><span class="line"><span class="comment">//其他浏览器解析，&lt;ul&gt;会有7个子节点，3个&lt;li&gt;，4个文本节点（空白符）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历子节点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=element.childNodes.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(element.nodeType==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：如ul含有更多层次的后代li元素，都会返回</span></span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>);</span><br><span class="line"><span class="keyword">var</span> items=ul.getElementsByTagName(<span class="string">"li"</span>);</span><br></pre></td></tr></table></figure><h4><span id="14text类型">1.4Text类型</span></h4><ul><li>parentNode是一个Element，nodeValue和data的值都为节点所包含的文本</li><li><strong>操作节点的方法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">appendDate(text):将text添加到节点的末尾</span><br><span class="line">deleteData(offset,count):从offset指定的位置开始删除count个字符</span><br><span class="line">insertData(offset,text):从offset指定的位置插入text</span><br><span class="line">replaceData(offset,count,text):用text替换从offset指定的位置开始到offset+count为止处的文本</span><br><span class="line">splitText(offset):从offset指定的位置将当前文本节点分成两个文本节点</span><br><span class="line">substringData(offset,sount):提取从offset指定的位置开始到offset+count为止处的字符串</span><br><span class="line">nodeValue.length==data.length:保存文本节点字符的数目</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改文本节点的值</span></span><br><span class="line">div.firstChild.nodeValue=<span class="string">"....."</span>;<span class="comment">//div.childNodes[0].nodeValue="..."</span></span><br><span class="line"><span class="comment">//添加文本</span></span><br><span class="line">div.firstChild.appendData(<span class="string">"...."</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>创建文本节点creatTextNode()</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.createElement(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">"Hello"</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br></pre></td></tr></table></figure><ul><li><strong>DoumentFragment类型</strong><br>&emsp;创建文本片段：<code>document.createDocumentFragment()</code>方法。避免浏览器反复渲染，可以把要创建的项先添加到文本片段，然后再添加至文档中</li></ul><h3><span id="2dom扩展">2.DOM扩展</span></h3><p>对DOM的两个主要扩展是Selectors API和HTML5。</p><ul><li><strong>选择符API</strong>:querySelector()和querySelectorAll()<br>&emsp;querySelector()返回与该模式匹配的第一个元素，document.querySelector()会在文档元素的范围内查找，element.querySelector()只会在该元素后代元素的范围内查找。<br>&emsp;querySelectorAll()返回的是所以匹配的元素</li><li><strong>元素遍历</strong><br>利用这些属性不必担心空白文本节点，更方便查找DOM元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">childElementCount:返回子元素（不包括文本节点和注释）的注释</span><br><span class="line">firstElementChild:指向第一个子元素；firstChild的元素版</span><br><span class="line">lastElementChild:指向最后一个子元素</span><br><span class="line">previousElementSibling:指向前一个同辈元素</span><br><span class="line">nextElementSibling:指向后一个同辈元素</span><br></pre></td></tr></table></figure><ul><li><p><strong>HTML5</strong></p><ul><li>getElementsByClassName()<br>&emsp;<code>document.getElementsByClassName(&quot;className1 className2&quot;)</code>取得所有类中包含“className1”和“className2”的元素</li><li>classList属性<br>&emsp;方法：add(value),contains(value),remove(value),toggle(value)<br>&emsp;如<code>div.classList.remove(&quot;className&quot;)</code></li><li><p>自定义数据属性<br>&emsp;如<code>&lt;div id=&quot;myDiv&quot; data-appId=&quot;123&quot; data-myname=&quot;wt&quot;&gt;&lt;/div&gt;</code>添加了自定义数据属性，可以通过元素的dataset属性来访问自定义属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得自定义属性的值</span></span><br><span class="line"><span class="keyword">var</span> appId=div.dataset.appId;<span class="comment">//要去掉data-</span></span><br><span class="line"><span class="keyword">var</span> myname=div.dataset.myname;</span><br></pre></td></tr></table></figure></li><li><p>插入标记<br>&emsp;经常使用的：innerHTML和outerHTML属性(HTML5纳入标准)<br>&emsp;insertAdjacentHTML()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"beforebegin"</span>,在当前元素之前插入一个紧邻的同辈元素</span><br><span class="line"><span class="string">"afterbegin"</span>,在当前元素之下插入一个新的子元素（成为当前元素的第一个子元素）</span><br><span class="line"><span class="string">"beforeend"</span>,(成为当前元素的最后一个子元素)</span><br><span class="line"><span class="string">"afterend"</span>,在当前元素之后插入一个紧邻的同辈元素</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">element.insertAdjacentElement(<span class="string">"beforebegin"</span>,<span class="string">"&lt;p&gt;text&lt;/p&gt;"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>专业扩展</strong></p><ul><li>children属性，只包含元素节点，不考虑空白符<code>element.children[0]</code></li><li>contains()判断某个节点是不是另一个节点的后代，如<code>document.documentElement.contains(document.body)</code>返回true</li><li>innerText和outerText（HTML5未纳入标准）<br>&emsp;去掉div中的HTML标签可以：<code>div.innerText = div.innerText</code></li></ul></li></ul><h3><span id="3dom2和dom3">3.DOM2和DOM3</span></h3><p>&emsp;DOM1级主要定义的是HTML和XML文档的底层结构。DOM2和DOM3在于扩展DOM API，以满足操作XML的所有需求，同时提供更好的错误处理及特性检测能力。</p><ul><li><strong>DOM变化</strong><ul><li>针对XML命名空间的变化<br>&emsp;有了XML命名空间，不同XML文档的元素就可以混合在一起。</li><li>创建一个完整的HTML文档：<code>var htmldoc=document.implementation.createHTMLDocument(&quot;New Doc&quot;)</code>,只接受一个参数，为文档的标题。  </li></ul></li></ul><ul><li><p><strong>样式</strong></p><ul><li>JS访问样式的属性必须转换为驼峰式，如background-image得写成backgroundImage</li><li>float是JS保留字，访问float属性：cssFloat或styleFloat(IE)</li><li>DOM2级样式属性和方法（常用）：<code>cssText</code>，<code>length</code>，<code>item(index)</code>，<code>removeProperty(propertyName)</code><br>有：<code>myDiv.style.style[i]==myDiv.style.item(i)</code></li><li>偏移量：<code>offsetHeight</code>，<code>offsetWidth</code>，<code>offsetLeft</code>,<code>offsetTop</code><br><code>offsetHeight</code>，<code>offsetWidth</code>包括元素、滚动条、边框的高/宽<br>要想知道某个元素在页面上的偏移量，将这个元素的<code>offsetLeft</code>，<code>offsetTop</code>与其<code>offsetParent</code>的相同属性想加，如此循环直至根元素</li><li>客户区大小：<code>clientWidth</code>和<code>clientHeight</code>（内容区+内边距）  </li></ul></li></ul><ul><li><strong>遍历</strong><br>&emsp;完成顺序遍历DOM结构的类型：<code>NodeIterator</code>和<code>TreeWalker</code></li><li><strong>范围</strong><br>&emsp;通过范围可以选择文档中的一个区域，而不必考虑节点的界限。在常规的DOM操作不能更效地修改文档时，可以使用范围达到。但是目前来看，我还没有用到范围来操作文档内容，今后用到了再来翻阅。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近自己写项目的时候，DOM操作稍多，但是发现自己不是很熟悉，以前看过的知识不常用就忘了，用的时候也是要经常去官网或网上查找。所以想把DOM的知识点重新回顾一下，以下知识点来自“JavaScript高级程序设计”第10、11、12章节。另外，想自己练习DOM操作相关的题，推荐&lt;a href=&quot;http://ife.baidu.com/college/detail/id/10&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度前端技术学院&lt;/a&gt;的斌斌学院，上面有很多可操作的题，看的再多不如自己多思考多敲代码，这点我深有体会，可是吃了大亏的啊。&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1dom1&quot;&gt;1.DOM1&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11node类型&quot;&gt;1.1Node类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12document类型&quot;&gt;1.2Document类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13element类型&quot;&gt;1.3Element类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#14text类型&quot;&gt;1.4Text类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2dom扩展&quot;&gt;2.DOM扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3dom2和dom3&quot;&gt;3.DOM2和DOM3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="DOM" scheme="https://wtlemoney.github.io/categories/DOM/"/>
    
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="节点操作" scheme="https://wtlemoney.github.io/tags/%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
    
      <category term="浏览器兼容" scheme="https://wtlemoney.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="DOM操作" scheme="https://wtlemoney.github.io/tags/DOM%E6%93%8D%E4%BD%9C/"/>
    
      <category term="DOM选择器" scheme="https://wtlemoney.github.io/tags/DOM%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
</feed>
