<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtLemoney</title>
  
  <subtitle>To be a happy&amp;lovely programmer...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wtlemoney.github.io/"/>
  <updated>2018-04-04T03:20:39.155Z</updated>
  <id>https://wtlemoney.github.io/</id>
  
  <author>
    <name>wtLemoney</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯IMWeb前端训练营作业——经典面试题1</title>
    <link href="https://wtlemoney.github.io/2018/04/03/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E9%A2%981/"/>
    <id>https://wtlemoney.github.io/2018/04/03/腾讯面试题1/</id>
    <published>2018-04-03T14:05:53.000Z</published>
    <updated>2018-04-04T03:20:39.155Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这些面试题是我之前参加腾讯前端训练营的时候，每天的一些面试题作业。最近自己参加暑期实习生面试的时候，也被问到过一些类似的问题。所以我整理总结了以前的面试题，通过自己搜索资料学习总结。答案有些是结合自己的理解，有些是网络上一些回答的比较好的答案，仅供参考。</p><!-- toc --><ul><li><a href="#1什么是盒子模型">1.什么是盒子模型？</a></li><li><a href="#2简述一下src与href的区别">2.简述一下src与href的区别？</a></li><li><a href="#3怎样添加-移除-移动-复制-创建和查找节点">3.怎样添加、移除、移动、复制、创建和查找节点？</a></li><li><a href="#4一次完整的http事务是怎样的一个过程">4.一次完整的HTTP事务是怎样的一个过程？</a></li><li><a href="#5你所了解的web攻击技术">5.你所了解的web攻击技术？</a></li><li><a href="#6ajax是什么ajax的交互原理同步和异步的区别">6.ajax是什么？ajax的交互原理？同步和异步的区别？</a></li><li><a href="#4什么叫优雅降级和渐进增强">4.什么叫优雅降级和渐进增强？</a></li><li><a href="#5在javascript中什么是伪数组如何将伪数组转化为标准数组">5.在JavaScript中什么是伪数组？如何将伪数组转化为标准数组？</a></li><li><a href="#6浏览器本地储存">6.浏览器本地储存？</a></li><li><a href="#7线程和进程的区别">7.线程和进程的区别？</a></li><li><a href="#8请说出三种减少页面加载时间的方法">8.请说出三种减少页面加载时间的方法？</a></li><li><a href="#9http状态码">9.HTTP状态码？</a></li><li><a href="#10请解释javascript的同源策略">10.请解释JavaScript的同源策略？</a></li><li><a href="#11get和post的区别何时使用post">11.get和post的区别，何时使用post？</a></li></ul><!-- tocstop --><h4><span id="1什么是盒子模型">1.什么是盒子模型？</span></h4><p>两种：IE盒子模型、标准W3C盒子模型，包括content、padding、margin、border。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IE8的width=border-left+padding-left+内容宽度+padding-right+border-right;  </span><br><span class="line">IE8的height=border-top+padding-top+内容高度+padding-bottom+border-bottom; </span><br><span class="line">w3c规定的width=内容宽度; </span><br><span class="line">w3c规定的height=内容高度;</span><br></pre></td></tr></table></figure></p><p>这样有可能导致不同浏览器下获取的width或height的值不同,幸好jquery提供了另外两个方法:<a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innerWidth():padding-left+内容宽度+padding-right; </span><br><span class="line">outerWidth():border-left+padding-left+内容宽度+padding-right+border-right; </span><br><span class="line">outerWidth(<span class="literal">true</span>):margin-left+border-left+padding-left+内容宽度+padding-right+border-right+margin-right;</span><br></pre></td></tr></table></figure></p><h4><span id="2简述一下src与href的区别">2.简述一下src与href的区别？</span></h4><p>src指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src =<span class="string">"js.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。<br>href指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=<span class="string">"common.css"</span> rel=<span class="string">"stylesheet"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</p><h4><span id="3怎样添加-移除-移动-复制-创建和查找节点">3.怎样添加、移除、移动、复制、创建和查找节点？</span></h4><p>&emsp;1）创建新节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createDocumentFragment() <span class="comment">//创建一个DOM片段</span></span><br><span class="line">createElement() <span class="comment">//创建一个具体的元素</span></span><br><span class="line">createTextNode() <span class="comment">//创建一个文本节点</span></span><br></pre></td></tr></table></figure></p><p>&emsp;2）添加、移除、替换、插入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendChild() <span class="comment">//添加</span></span><br><span class="line">removeChild() <span class="comment">//移除</span></span><br><span class="line">replaceChild() <span class="comment">//替换</span></span><br><span class="line">insertBefore() <span class="comment">//之前插入</span></span><br><span class="line">insertAfter() <span class="comment">//之后插入</span></span><br><span class="line">cloneNode() <span class="comment">//复制</span></span><br></pre></td></tr></table></figure></p><p>&emsp;3）查找<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getElementsByTagName() <span class="comment">//通过标签名称</span></span><br><span class="line">getElementsByName() <span class="comment">//通过元素的Name属性的值</span></span><br><span class="line">getElementById() <span class="comment">//通过元素Id，唯一性</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">""</span>)  <span class="comment">//通过类查找</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p><h4><span id="4一次完整的http事务是怎样的一个过程">4.一次完整的HTTP事务是怎样的一个过程？</span></h4><p>&emsp;&emsp;当我们在浏览器的地址栏输入URL ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？<br>&emsp;&emsp;域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户  </p><h4><span id="5你所了解的web攻击技术">5.你所了解的web攻击技术？</span></h4><p>&emsp;&emsp;XSS：跨站脚本攻击（Cross Site Scripting）<br>攻击者通过注入非法的html标签或者javascript代码，从而当用户浏览该网页时，控制用户浏览器。本质：内容没有过滤导致浏览器将攻击者的输入当代码执行。<br>&emsp;&emsp;CSRF：跨站点请求伪造（Cross-Site Request Forgeries）<br>冒充用户发起请求，完成一些违背用户意愿的事情（如修改用户信息，删除评论等）。本质：浏览器在发送HTTP请求时自动带上cookie，而一般网站的session都存在cookie里面。防御：get/post、验证码、请求来源限制、token等。<br>&emsp;&emsp;clickjacking：点击劫持<br>利用透明的按钮或连接做成陷阱，覆盖在Web网页之上。防御：X-FRAME-OPTIONS(用来给浏览器指示允许一个页面可否在<code>&lt;frame&gt;、&lt;object&gt;</code>等中展现的标记。网站可使用此功能，确保自己网站没有被嵌到别人网站中去)</p><h4><span id="6ajax是什么ajax的交互原理同步和异步的区别">6.ajax是什么？ajax的交互原理？同步和异步的区别？</span></h4><p>&emsp;&emsp;AJAX = 异步 JavaScript 和 XML，是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>&emsp;&emsp;缺点：ajax用XHR对象做出的请求不会记录在浏览器的历史中。如果你的用户习惯使用浏览器的”后退”按钮在web应用中进行导航，就可能会产生问题。另外，ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于credentials的安全漏洞等。</p><p>&emsp;&emsp;交互原理：通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。XMLHttpRequest这个对象的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onreadystatechange 每次状态改变所触发事件的事件处理程序。</span><br><span class="line">  　　responseText       从服务器进程返回数据的字符串形式。</span><br><span class="line">  　　responseXML        从服务器进程返回的DOM兼容的文档数据对象。</span><br><span class="line">  　　status             从服务器返回的数字代码，比如常见的<span class="number">404</span>（未找到）和<span class="number">200</span>（已就绪）</span><br><span class="line">  　　status Text        伴随状态码的字符串信息</span><br><span class="line">  　　readyState         对象状态值</span><br><span class="line">　　　　<span class="number">0</span> (未初始化)      对象已建立，但是尚未初始化（尚未调用open方法）</span><br><span class="line">　　　　<span class="number">1</span> (初始化)        对象已建立，尚未调用send方法</span><br><span class="line">　　　　<span class="number">2</span> (发送数据)     send方法已调用，但是当前的状态及http头未知</span><br><span class="line">　　　　<span class="number">3</span> (数据传送中)    已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误</span><br><span class="line">　　　　<span class="number">4</span> (完成)         数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;异步传输：是面向字符的传输，它的单位是字符；异步传输是将比特分成小组来进行传送。一般每个小组是一个8位字符，在每个小组的头部和尾部都有一个开始位和一个停止位，它在传送过程中接收方和发送方的时钟不要求一致，也就是说，发送方可以在任何时刻发送这些小组，而接收方并不知道它什么时候到达。<br>&emsp;&emsp;同步传输：是面向比特的传输，它的单位是桢，它传输的时候要求接受方和发送方的时钟是保持一致的。同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。同步传输通常要比异步传输快速得多。接收方不必对每个字符进行开始和停止的操作。一旦检测到帧同步字符，它就在接下来的数据到达时接收它们。另外，同步传输的开销也比较少。   </p><h4><span id="4什么叫优雅降级和渐进增强">4.什么叫优雅降级和渐进增强？</span></h4><p>&emsp;&emsp;优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效.<br>&emsp;&emsp;渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p><h4><span id="5在javascript中什么是伪数组如何将伪数组转化为标准数组">5.在JavaScript中什么是伪数组？如何将伪数组转化为标准数组？</span></h4><p>&emsp;&emsp;伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以用真正数组的遍历方法遍历它们。典型的是函数的argument参数，还有像调用<code>getElementByTagName</code>,<code>document.childNodes</code>之类的，它们都返回NodeList对象都属于伪数组。<br>&emsp;&emsp;可以通过Array.prototype.slice.call(fakeArray)将伪数组转化为真正的Array对象。</p><h4><span id="6浏览器本地储存">6.浏览器本地储存？</span></h4><p>&emsp;&emsp;在 HTML5 中提供了 sessionStorage 和 localStorage 。<br>&emsp;&emsp;sessionStorage：用于本地存储一个会话（ session ）中的数据，这些数据只有在同一个会话中的页面才能访问，会话结束后数据随之销毁。因此它不是一种持久化的本地存储，仅仅是会话级别的存储。<br>&emsp;&emsp;localStorage：用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。IE8及以上都兼容。<br>&emsp;&emsp;cookie：当用户访问了某个网站（网页）时，我们就可通过cookie来向访问者电脑上存储数据。或者，某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据（加密）。cookie值既可以设置，也可以读取。如何工作：1）当网页要发http请求时，浏览器会先检查是否有相应的cookie，有则自动添加在request header中的字段中。2）对于那种设置“每次请求都要携带的信息”（最典型：身份认证信息）特别适合放在cookie中，其他类型的数据就不适合了。</p><h4><span id="7线程和进程的区别">7.线程和进程的区别？</span></h4><p>&emsp;&emsp;进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。以多进程形式，允许多个任务同时运行；以多线程形式，允许单个任务分成不同的部分运行；</p><h4><span id="8请说出三种减少页面加载时间的方法">8.请说出三种减少页面加载时间的方法？</span></h4><p>&emsp;&emsp;1）优化图片<br>&emsp;&emsp;2）图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）<br>&emsp;&emsp;3）优化CSS（压缩合并css，如 margin-top, margin-left…)<br>&emsp;&emsp;4）网址后加斜杠（如<a href="http://www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）" target="_blank" rel="noopener">www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）</a><br>&emsp;&emsp;5）标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了）<br>&emsp;&emsp;6）减少http请求（合并文件，合并图片）CSS精灵，将JS代码写在body后面</p><h4><span id="9http状态码">9.HTTP状态码？</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>xx: 信息性状态码，表示服务器接收到请求正在处理。</span><br><span class="line"><span class="number">2</span>xx: 成功状态码，表示服务器正确处理完请求。</span><br><span class="line"><span class="number">3</span>xx: 重定向状态码，表示请求的资源位置发生改变，需要重新请求。<span class="number">301</span>永久重定向，<span class="number">302</span>临时重定向。</span><br><span class="line"><span class="number">4</span>xx: 客户端错误状态码，服务器无法处理该请求。 <span class="number">404</span> not found</span><br><span class="line"><span class="number">5</span>xx: 服务器错误状态码，服务器处理请求出错。</span><br><span class="line"></span><br><span class="line"><span class="number">100</span> Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</span><br><span class="line"><span class="number">200</span> OK 正常返回信息</span><br><span class="line"><span class="number">201</span> Created 请求成功并且服务器创建了新的资源</span><br><span class="line"><span class="number">202</span> Accepted 服务器已接受请求，但尚未处理</span><br><span class="line"><span class="number">301</span> Moved Permanently 请求的网页已永久移动到新位置</span><br><span class="line"><span class="number">302</span> Found 临时性重定向</span><br><span class="line"><span class="number">303</span> See Other 临时性重定向，且总是使用 GET 请求新的 URI</span><br><span class="line"><span class="number">304</span> Not Modified 自从上次请求后，请求的网页未修改过</span><br><span class="line"><span class="number">400</span> Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求</span><br><span class="line"><span class="number">401</span> Unauthorized 请求未授权</span><br><span class="line"><span class="number">403</span> Forbidden 禁止访问</span><br><span class="line"><span class="number">404</span> Not Found 找不到如何与 URI 相匹配的资源</span><br><span class="line"><span class="number">500</span> Internal Server <span class="built_in">Error</span> 最常见的服务器端错误</span><br><span class="line"><span class="number">503</span> Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</span><br></pre></td></tr></table></figure><h4><span id="10请解释javascript的同源策略">10.请解释JavaScript的同源策略？</span></h4><p>&emsp;&emsp;同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准，目的是防止某个文档或脚本从多个不同源装载。同源策略：协议，域名，端口相同，它是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性，无法访问其它域的资源。</p><h4><span id="11get和post的区别何时使用post">11.get和post的区别，何时使用post？</span></h4><p>&emsp;&emsp;GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符<br>&emsp;&emsp;POST：一般用于修改服务器上的资源，对所发送的信息没有限制<br>&emsp;&emsp;HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。<br>&emsp;&emsp;在以下情况中，请使用 POST 请求：<br>&emsp;&emsp;1）无法使用缓存文件（更新服务器上的文件或数据库）<br>&emsp;&emsp;2）向服务器发送大量数据（POST 没有数据量限制）<br>&emsp;&emsp;3）发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠<br>&emsp;&emsp;安全性：<br>&emsp;&emsp;1）GET不会修改服务端数据，POST可以修改数据<br>&emsp;&emsp;2）URL方式发起GET请求，参数会明文暴露<br>&emsp;&emsp;3）使用GET提交数据还可能会造成Cross-site request forgery攻击<br>&emsp;&emsp;4）本质上安全性无区别</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这些面试题是我之前参加腾讯前端训练营的时候，每天的一些面试题作业。最近自己参加暑期实习生面试的时候，也被问到过一些类似的问题。所以我整理总结了以前的面试题，通过自己搜索资料学习总结。答案有些是结合自己的理解，有些是网络上一些回答的比较好的答案，仅供参考。&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1什么是盒子模型&quot;&gt;1.什么是盒子模型？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2简述一下src与href的区别&quot;&gt;2.简述一下src与href的区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3怎样添加-移除-移动-复制-创建和查找节点&quot;&gt;3.怎样添加、移除、移动、复制、创建和查找节点？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4一次完整的http事务是怎样的一个过程&quot;&gt;4.一次完整的HTTP事务是怎样的一个过程？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5你所了解的web攻击技术&quot;&gt;5.你所了解的web攻击技术？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6ajax是什么ajax的交互原理同步和异步的区别&quot;&gt;6.ajax是什么？ajax的交互原理？同步和异步的区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4什么叫优雅降级和渐进增强&quot;&gt;4.什么叫优雅降级和渐进增强？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5在javascript中什么是伪数组如何将伪数组转化为标准数组&quot;&gt;5.在JavaScript中什么是伪数组？如何将伪数组转化为标准数组？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6浏览器本地储存&quot;&gt;6.浏览器本地储存？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7线程和进程的区别&quot;&gt;7.线程和进程的区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8请说出三种减少页面加载时间的方法&quot;&gt;8.请说出三种减少页面加载时间的方法？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9http状态码&quot;&gt;9.HTTP状态码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#10请解释javascript的同源策略&quot;&gt;10.请解释JavaScript的同源策略？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#11get和post的区别何时使用post&quot;&gt;11.get和post的区别，何时使用post？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h4 id=&quot;1-什么是盒子模型？&quot;&gt;&lt;a href=&quot;#1-什么是盒子模型？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是盒子模型？&quot;&gt;&lt;/a&gt;1.什么是盒子模型？&lt;/h4&gt;&lt;p&gt;两种：IE盒子模型、标准W3C盒子模型，包括content、padding、margin、border。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IE8的width=border-left+padding-left+内容宽度+padding-right+border-right;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IE8的height=border-top+padding-top+内容高度+padding-bottom+border-bottom; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w3c规定的width=内容宽度; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w3c规定的height=内容高度;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样有可能导致不同浏览器下获取的width或height的值不同,幸好jquery提供了另外两个方法:
    
    </summary>
    
      <category term="腾讯训练营" scheme="https://wtlemoney.github.io/categories/%E8%85%BE%E8%AE%AF%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    
      <category term="面试" scheme="https://wtlemoney.github.io/categories/%E8%85%BE%E8%AE%AF%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="总结" scheme="https://wtlemoney.github.io/categories/%E8%85%BE%E8%AE%AF%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%9D%A2%E8%AF%95/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="interview" scheme="https://wtlemoney.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>那些你常常会忘的处理数组的函数</title>
    <link href="https://wtlemoney.github.io/2018/04/02/%E6%95%B0%E7%BB%84/"/>
    <id>https://wtlemoney.github.io/2018/04/02/数组/</id>
    <published>2018-04-01T16:38:49.000Z</published>
    <updated>2018-04-01T16:52:14.591Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;哈哈，看似是些简单的处理数组的函数，但是由于平时码的少，实习生笔试的时候走了弯路吃了亏啊，写的很慢呀。。。有些是忘记了，有些是参数和返回值记忆模糊了，所以多码码，总结总结。持续更新中…</p><h4><span id="1-splice">1. splice()</span></h4><p>返回值为被删除的元素数组，原数组会改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'d'</span>];</span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);<span class="comment">//[4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure></p><h4><span id="2-slice">2. slice()</span></h4><p>可从已有的数组中返回选定的元素,并不会修改数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">arr.slice(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//['a','c','d']</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure></p><a id="more"></a>    <h4><span id="3-filter">3. filter()</span></h4><p>返回新的数组,原数组不改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value&gt;=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">130</span>,<span class="number">44</span>];</span><br><span class="line">arr.filter(isBigEnough);<span class="comment">//[12,130,44]</span></span><br></pre></td></tr></table></figure></p><h4><span id="4-map">4. map()</span></h4><p>生成新的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;);<span class="comment">//res=[1,4,9]</span></span><br></pre></td></tr></table></figure></p><h4><span id="5-reduce">5. reduce()</span></h4><p>原数组不改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;);<span class="comment">//res=15</span></span><br></pre></td></tr></table></figure></p><h4><span id="6-every">6. every()</span></h4><p>判断arr是否都满足x&gt;=18的条件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">18</span>;</span><br><span class="line">&#125;);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><h4><span id="7-some">7. some()</span></h4><p>判断是否有满足条件的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">18</span>;</span><br><span class="line">&#125;);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;哈哈，看似是些简单的处理数组的函数，但是由于平时码的少，实习生笔试的时候走了弯路吃了亏啊，写的很慢呀。。。有些是忘记了，有些是参数和返回值记忆模糊了，所以多码码，总结总结。持续更新中…&lt;/p&gt;
&lt;h4 id=&quot;1-splice&quot;&gt;&lt;a href=&quot;#1-splice&quot; class=&quot;headerlink&quot; title=&quot;1. splice()&quot;&gt;&lt;/a&gt;1. splice()&lt;/h4&gt;&lt;p&gt;返回值为被删除的元素数组，原数组会改变&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr=[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//[4,5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);&lt;span class=&quot;comment&quot;&gt;//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-slice&quot;&gt;&lt;a href=&quot;#2-slice&quot; class=&quot;headerlink&quot; title=&quot;2. slice()&quot;&gt;&lt;/a&gt;2. slice()&lt;/h4&gt;&lt;p&gt;可从已有的数组中返回选定的元素,并不会修改数组。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr=[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);&lt;span class=&quot;comment&quot;&gt;//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数组" scheme="https://wtlemoney.github.io/categories/%E6%95%B0%E7%BB%84/"/>
    
      <category term="函数" scheme="https://wtlemoney.github.io/categories/%E6%95%B0%E7%BB%84/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="array" scheme="https://wtlemoney.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>作用域闭包</title>
    <link href="https://wtlemoney.github.io/2018/03/30/%E9%97%AD%E5%8C%85/"/>
    <id>https://wtlemoney.github.io/2018/03/30/闭包/</id>
    <published>2018-03-30T12:48:11.000Z</published>
    <updated>2018-03-31T01:38:38.525Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="1-什么是闭包">1. 什么是闭包？</span></h4><p>&emsp;&emsp;OK,来看下面一段能清晰展示闭包的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz=foo();</span><br><span class="line">baz();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;闭包使得函数bar()可以继续访问定义时的词法作用域。函数能被外部调用到，则该作用域链上的所有变量都会被保存下来。  </p><blockquote><ul><li>定义：包就是能够读取其他函数内部变量的函数。由于在JavaScript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解为“定义在一个函数内部的函数”。</li><li>本质：闭包是将函数内部和外部连接起来的桥梁。</li><li>用处：一是可以读取函数内部的变量；二是让这些变量的值始终保持在内存中。</li><li>注意点：<a id="more"></a><br>&emsp;&emsp;&emsp;1）不能滥用闭包<br>&emsp;&emsp;由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能会导致内存泄漏。<br>&emsp;&emsp;解决方法：在退出函数之前，将不使用的局部变量全部删除。<br>&emsp;&emsp;&emsp;2）不要随便改变父函数内部变量的值。<br>&emsp;&emsp;把父函数当作对象使用，闭包当作它的公有方法，内部变量当作它的私有属性，闭包会在父函数外部，改变父函数变量的值，所以要注意。  </li></ul></blockquote><h4><span id="2-循环和闭包">2. 循环和闭包</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,i*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;正常情况下，这段代码预期会分别输出数字1-5，每秒一次，每次一个(注意是i*1000,不是1000)。但实际上，这段代码会以每秒一次的频率输出五次6(如果是1000，五个6会同一时间输出)！这是因为：循环的终止条件是i=6，而延迟函数的回调会在循坏结束时在执行。<br>&emsp;&emsp;试一下这样可以输出预期的1-5吗：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;,i*<span class="number">1000</span>);</span><br><span class="line">&#125;)();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;答案是不行！这样每个延迟函数确实将立即执行函数在每次迭代中创建的作用域封闭起来，但是作用域是空的，所以它需要有自己的变量，用来在迭代中储存i的值。像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> j=i;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(j);</span><br><span class="line">      &#125;,j*<span class="number">1000</span>);</span><br><span class="line">&#125;)();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以对上面的代码进行改进：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;<span class="comment">//将i传递进来，将变量名定为j，当然也可以还叫作i</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(j);</span><br><span class="line">      &#125;,j*<span class="number">1000</span>);</span><br><span class="line">&#125;)(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;块作用域和闭包联手，听说天下无敌，不信你看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(j);</span><br><span class="line">   &#125;,j*<span class="number">1000</span>);<span class="comment">//程序员的快乐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="3-闭包的好处">3. 闭包的好处</span></h4><h4><span id="emsp31-减少局部变量">&emsp;3.1 减少局部变量</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;a++;alert(a);&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f();</span><br><span class="line">result();<span class="comment">//1</span></span><br><span class="line">result();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4><span id="emsp32-减少传递给函数的参数变量">&emsp;3.2 减少传递给函数的参数变量</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calFactory</span>(<span class="params">base</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">max</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> total=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=max;i++)&#123;</span><br><span class="line">            total+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total+base;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> adder=calFactory(<span class="number">2</span>);</span><br><span class="line">adder(<span class="number">3</span>);<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h4><span id="emsp33-封装">&emsp;3.3 封装</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getM</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> m;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setM</span>(<span class="params">val</span>)</span>&#123;m=val;&#125;</span><br><span class="line">    <span class="built_in">window</span>.g=getM;</span><br><span class="line">    <span class="built_in">window</span>.f=setM;</span><br><span class="line">&#125;)();</span><br><span class="line">f(<span class="number">12</span>);</span><br><span class="line">alert(g());<span class="comment">//12</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-什么是闭包？&quot;&gt;&lt;a href=&quot;#1-什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是闭包？&quot;&gt;&lt;/a&gt;1. 什么是闭包？&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;OK,来看下面一段能清晰展示闭包的代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz=foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz();&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;闭包使得函数bar()可以继续访问定义时的词法作用域。函数能被外部调用到，则该作用域链上的所有变量都会被保存下来。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;定义：包就是能够读取其他函数内部变量的函数。由于在JavaScript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解为“定义在一个函数内部的函数”。&lt;/li&gt;
&lt;li&gt;本质：闭包是将函数内部和外部连接起来的桥梁。&lt;/li&gt;
&lt;li&gt;用处：一是可以读取函数内部的变量；二是让这些变量的值始终保持在内存中。&lt;/li&gt;
&lt;li&gt;注意点：
    
    </summary>
    
      <category term="闭包" scheme="https://wtlemoney.github.io/categories/%E9%97%AD%E5%8C%85/"/>
    
      <category term="你不知道的JavaScript" scheme="https://wtlemoney.github.io/categories/%E9%97%AD%E5%8C%85/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="闭包" scheme="https://wtlemoney.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>变量提升</title>
    <link href="https://wtlemoney.github.io/2018/03/29/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <id>https://wtlemoney.github.io/2018/03/29/变量提升/</id>
    <published>2018-03-28T16:25:38.000Z</published>
    <updated>2018-03-29T06:24:57.798Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="1-先有鸡还是先有蛋">1. 先有鸡还是先有蛋</span></h4><p>&emsp;&emsp;来看下面两段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;<span class="comment">//undefined,不是ReferenceError!</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;实际上，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。所以，先有蛋（声明）后有鸡（赋值）。只有声明本身会提升，而赋值或其他运行逻辑会留在原地。<br><br>&emsp;&emsp;注意：函数声明会被提升，但是函数表达式不会提升。看下面：<a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo();<span class="comment">//不是ReferenceError,而是TypeError!</span></span><br><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;foo()由于对undefined值进行函数调用而导致非法操作，因此抛出TypeError异常！</p><h4><span id="2-函数优先">2. 函数优先</span></h4><p>&emsp;&emsp;有多个“重复”声明的代码中，函数首先被提升，然后才是变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo();<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;会输出1而不是2！这个代码会被引擎理解为如下形式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();<span class="comment">//1</span></span><br><span class="line">foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以，要避免重复声明，特别是当普通的var声明和函数声明混合在一起的时候，否则会引起很多危险的问题！<br>&emsp;&emsp;尽管重复的var声明会被会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foo();<span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;需要注意的是，尽可能避免在块内部声明函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">foo();<span class="comment">//'b'</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-先有鸡还是先有蛋&quot;&gt;&lt;a href=&quot;#1-先有鸡还是先有蛋&quot; class=&quot;headerlink&quot; title=&quot;1. 先有鸡还是先有蛋&quot;&gt;&lt;/a&gt;1. 先有鸡还是先有蛋&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;来看下面两段代码&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//undefined,不是ReferenceError!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;实际上，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。所以，先有蛋（声明）后有鸡（赋值）。只有声明本身会提升，而赋值或其他运行逻辑会留在原地。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;注意：函数声明会被提升，但是函数表达式不会提升。看下面：
    
    </summary>
    
      <category term="你不知道的JavaScript" scheme="https://wtlemoney.github.io/categories/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/"/>
    
      <category term="函数" scheme="https://wtlemoney.github.io/categories/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
      <category term="变量" scheme="https://wtlemoney.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>this的指向问题</title>
    <link href="https://wtlemoney.github.io/2018/03/27/this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>https://wtlemoney.github.io/2018/03/27/this的指向/</id>
    <published>2018-03-27T11:06:24.000Z</published>
    <updated>2018-03-29T13:38:42.995Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="1-this的绑定规则">1. this的绑定规则</span></h4><h4><span id="ensp11ensp默认绑定">&ensp;1.1&ensp;默认绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">foo();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4><span id="ensp12ensp隐式绑定">&ensp;1.2&ensp;隐式绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo,</span><br><span class="line">    obj2:obj2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;</span><br><span class="line">    a:<span class="number">42</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;;</span><br><span class="line">obj1.foo();<span class="comment">//2</span></span><br><span class="line">obj1.obj2.foo();<span class="comment">//42</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4><span id="emspemsp121-隐式丢失常见">&emsp;&emsp;1.2.1 隐式丢失（常见）</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar =obj.foo;<span class="comment">//函数别名！丢失绑定对象，会应用默认绑定</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">"global"</span>;</span><br><span class="line">bar();<span class="comment">//"global"</span></span><br></pre></td></tr></table></figure><h4><span id="emspemsp122-隐式丢失传入回调函数时">&emsp;&emsp;1.2.2 隐式丢失（传入回调函数时）</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="string">"global"</span>;</span><br><span class="line">doFoo(obj.foo);<span class="comment">//"global",回掉函数丢失this绑定是非常常见的</span></span><br></pre></td></tr></table></figure><h4><span id="ensp13ensp显示绑定">&ensp;1.3&ensp;显示绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj);<span class="comment">//2,把this强制绑定到obj上，但还是无法解决隐式绑定中的绑定丢失</span></span><br></pre></td></tr></table></figure><h4><span id="emspemsp131-硬绑定">&emsp;&emsp;1.3.1 硬绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo.call(obj);</span><br><span class="line">&#125;</span><br><span class="line">bar();<span class="comment">//2</span></span><br><span class="line">setTimeout(bar,<span class="number">100</span>);<span class="comment">//2</span></span><br><span class="line">bar.call(<span class="built_in">window</span>);<span class="comment">//2,硬绑定的bar不可能再修改它的this</span></span><br></pre></td></tr></table></figure><h4><span id="emspemsp132-api调用的上下文">&emsp;&emsp;1.3.2 API调用的上下文</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el,<span class="keyword">this</span>.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    id:<span class="string">"awesome"</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(foo,obj);<span class="comment">//第二个参数的obj,用来指定foo中this的指向</span></span><br><span class="line"> <span class="comment">//输出为：1 awesome 2 awesome 3 awesome</span></span><br></pre></td></tr></table></figure><h4><span id="ensp14enspnew绑定">&ensp;1.4&ensp;new绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar =<span class="keyword">new</span> foo(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar.a);</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>&emsp;&emsp;<br>&emsp;&emsp;四类绑定的优先级：new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定<br><br></p></blockquote><h4><span id="2-回调函数里的this常见">2. 回调函数里的this（常见）</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'wt'</span>,</span><br><span class="line">    foo1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Object&#123;name:'wt'&#125;</span></span><br><span class="line">        <span class="keyword">var</span> _this=<span class="keyword">this</span>;<span class="comment">//用_this保存this的指向</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Window</span></span><br><span class="line">            <span class="built_in">console</span>.log(_this);<span class="comment">//Object&#123;name:'wt'&#125;</span></span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    foo2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Object&#123;name:'wt'&#125;</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Object&#123;name:'wt'&#125;</span></span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用1  </p><p>&emsp;&emsp;<code>obj.foo1();//结果见上面代码的注释</code></p><p>调用2  </p><p>&emsp;&emsp;<code>obj.foo2();</code><br>&emsp;&emsp;1,2两个方法同时调用的话，两个setTimeout会稍后执行，先执行foo1和foo2的<code>console.log(this)</code>,打印顺序不一样。这里的foo2相当于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;.bind(<span class="keyword">this</span>),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用3</p><p><code>var f=obj.foo1;//或f=obj.foo2</code><br><code>f();//this全部指向Window</code></p><h4><span id="ensp21ensp箭头函数的另一个例子">&ensp;2.1&ensp;箭头函数的另一个例子</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span><span class="function">(<span class="params">a</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//this继承自foo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=&#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;</span><br><span class="line">    a:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar=foo.call(obj1);</span><br><span class="line">bar.call(obj2);<span class="comment">//2,不是3！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-this的绑定规则&quot;&gt;&lt;a href=&quot;#1-this的绑定规则&quot; class=&quot;headerlink&quot; title=&quot;1. this的绑定规则&quot;&gt;&lt;/a&gt;1. this的绑定规则&lt;/h4&gt;&lt;h4 id=&quot;ensp-1-1-ensp-默认绑定&quot;&gt;&lt;a href=&quot;#ensp-1-1-ensp-默认绑定&quot; class=&quot;headerlink&quot; title=&quot;&amp;ensp;1.1&amp;ensp;默认绑定&quot;&gt;&lt;/a&gt;&amp;ensp;1.1&amp;ensp;默认绑定&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;ensp-1-2-ensp-隐式绑定&quot;&gt;&lt;a href=&quot;#ensp-1-2-ensp-隐式绑定&quot; class=&quot;headerlink&quot; title=&quot;&amp;ensp;1.2&amp;ensp;隐式绑定&quot;&gt;&lt;/a&gt;&amp;ensp;1.2&amp;ensp;隐式绑定&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo:foo,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj2:obj2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo:foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.foo();&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.obj2.foo();&lt;span class=&quot;comment&quot;&gt;//42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="你不知道的JavaScript" scheme="https://wtlemoney.github.io/categories/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="JavaScript" scheme="https://wtlemoney.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>我为什么要写博客</title>
    <link href="https://wtlemoney.github.io/2018/03/25/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://wtlemoney.github.io/2018/03/25/我为什么写博客/</id>
    <published>2018-03-25T15:21:10.000Z</published>
    <updated>2018-03-27T11:20:03.906Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;首先，我是一个从零开始的前端自学者，断断续续学了几个月的时间，留下了3个要满的手写笔记本，几本重点画了又画的前端书籍，以及电脑上数不清的手敲代码的各类文件夹。通过很多网站看了很多前端知识，然而现在…几乎忘的差不多了。我发现一个事实，自己一直在“学”，没有好好的总结，更不用说“习”了。所以，为啥要搞博客这么高端大气上档次的东西咧，总结一下主要有下面几点原因：  </p><ul><li><strong>面试被血虐</strong> </li></ul><p>&emsp;&emsp;前两天的腾讯实习生面试加笔试，把我虐的一塌糊涂。尽管我知道我自己菜，但没想到面完之后感觉自己也太菜了吧。很多问题其实都是平时遇到过的，只不过自己没有独立思考过原理和本质，回答的太不顺利。所以想通过博客这一平台，总结自己学习的知识，来检验自己是否真的掌握了。<br><a id="more"></a></p><ul><li><strong>语言逻辑差</strong></li></ul><p>&emsp;&emsp; 很多以为自己懂了的知识点，其实在面试官面前说出来就变味道了。语言没有任何逻辑性。这样很不好啊，听的人很累的呀，希望能多提高一下语言表达能力。 </p><ul><li><strong>梳理总结知识</strong></li></ul><p>&emsp;&emsp;记了那么多的笔记，翻起来还是相当以及极其之困难的，基本上也没翻过，都是百度。所以趁机好好整理我的宝贝笔记，把精华全部放到我的博客上。可以方便自己“习”，能帮到其他学习前端的同学就再好不过了。  </p><ul><li><strong>提高写作能力</strong></li></ul><p>&emsp;&emsp;微信读书看过不少书，特别欣赏能写出一首好文章的人。我写作能力高中就菜，希望通过自己坚持写博客，提高一下自己的写作水平，毕竟妹子还是搞点文艺犯比较招人喜欢的吧。</p><p>&emsp;&emsp;我的心路历程就是这样子滴。你看吧，说话真的没啥逻辑可言。<br>&emsp;&emsp;希望自己多多总结，找个好工作！<br>&emsp;&emsp;送给自己一些字符串：  </p><p><center><font color="blue" size="3">“越努力越幸运”</font></center></p><p><center><font color="blue" size="3">“远离舒适区”</font></center></p><p><center><font color="blue" size="3">“不能丧”</font></center><br>&emsp;&emsp;此处应附上我的美丽自拍和心灵鸡汤：</p><div align="center"><br><img src="我为什么写博客/beauty.jpg" width="180" height="180" alt="我的自拍"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;首先，我是一个从零开始的前端自学者，断断续续学了几个月的时间，留下了3个要满的手写笔记本，几本重点画了又画的前端书籍，以及电脑上数不清的手敲代码的各类文件夹。通过很多网站看了很多前端知识，然而现在…几乎忘的差不多了。我发现一个事实，自己一直在“学”，没有好好的总结，更不用说“习”了。所以，为啥要搞博客这么高端大气上档次的东西咧，总结一下主要有下面几点原因：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面试被血虐&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;前两天的腾讯实习生面试加笔试，把我虐的一塌糊涂。尽管我知道我自己菜，但没想到面完之后感觉自己也太菜了吧。很多问题其实都是平时遇到过的，只不过自己没有独立思考过原理和本质，回答的太不顺利。所以想通过博客这一平台，总结自己学习的知识，来检验自己是否真的掌握了。&lt;br&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="https://wtlemoney.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="blogs" scheme="https://wtlemoney.github.io/tags/blogs/"/>
    
      <category term="碎碎念" scheme="https://wtlemoney.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
